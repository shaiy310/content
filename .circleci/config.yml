version: 2
jobs:
  build:
    docker:
      - image: devdemisto/content-build-2and3:1.0.0.197 # disable-secrets-detection
    resource_class: medium+
    environment:
      CONTENT_VERSION: "19.4.2"
      SERVER_VERSION: "5.0.0"
      GIT_SHA1: "46a1d9ffbe6dbf734f9b790e7f2874f63e4b96ba" # guardrails-disable-line disable-secrets-detection
    steps:
      - checkout
      - run:
          name: Prepare Environment
          command: |
              echo 'export CIRCLE_ARTIFACTS="/home/circleci/project/artifacts"' >> $BASH_ENV
              echo 'export PATH="/home/circleci/.pyenv/shims:/home/circleci/.local/bin:/home/circleci/.pyenv/bin:${PATH}"' >> $BASH_ENV # disable-secrets-detection
              echo 'export PYTHONPATH="/home/circleci/project:${PYTHONPATH}"' >> $BASH_ENV
              echo "=== sourcing $BASH_ENV ==="
              source $BASH_ENV
              sudo mkdir -p -m 777 $CIRCLE_ARTIFACTS
              chmod +x ./Tests/scripts/*
              chmod +x ./Tests/lastest_server_build_scripts/*
              pyenv versions
              python --version
              python3 --version
      - add_ssh_keys:
          fingerprints:
              - "02:df:a5:6a:53:9a:f5:5d:bd:a6:fc:b2:db:9b:c9:47" # disable-secrets-detection
              - "f5:25:6a:e5:ac:4b:84:fb:60:54:14:82:f1:e9:6c:f9" # disable-secrets-detection
      - run:
          name: Create ID Set
          command: |
            python ./Tests/scripts/update_id_set.py -r
      - run:
          name: Infrastucture testing
          command: |
            pytest ./Tests/scripts/hook_validations/tests/ -v
            pytest ./Tests/scripts/infrastructure_tests/ -v
            pytest ./Tests/scripts/test_configure_tests.py -v
      - run:
          name: Validate Files and Yaml
          command: |
              ./Tests/scripts/pyflake.sh

              [ -n "${BACKWARD_COMPATIBILITY}" ] && CHECK_BACKWARD=false || CHECK_BACKWARD=true
              python ./Tests/scripts/validate_files.py -c true -b $CHECK_BACKWARD
      - run:
          name: Configure Test Filter
          command: |
              [ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false
              python ./Tests/scripts/configure_tests.py -n $IS_NIGHTLY
      - run:
          name: Build Content Descriptor
          command: ./setContentDescriptor.sh $CIRCLE_BUILD_NUM $GIT_SHA1 $CONTENT_VERSION $SERVER_VERSION
      - run:
          name: Common Server Documentation
          command: ./Documentation/commonServerDocs.sh
      - run:
          name: Create Content Artifacts
          command: python content_creator.py $CIRCLE_ARTIFACTS
      - store_artifacts:
          path: artifacts
          destination: artifacts
      - setup_remote_docker
      - run:
          name: Run Unit Testing and Lint
          command: SKIP_GIT_COMPARE_FILTER=${NIGHTLY} ./Tests/scripts/run_all_pkg_dev_tasks.sh
      - run:
          name: Download Artifacts
          command: |
            if ./Tests/scripts/is_ami.sh ;
              then
                echo "Using AMI - Not downloading artifacts"

              else
                ./Tests/scripts/server_get_artifact.sh $SERVER_CI_TOKEN
            fi
      - store_artifacts:
          path: artifacts
          destination: artifacts
          when: always


workflows:
  version: 2
  commit:
    jobs:
      - build
