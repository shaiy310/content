commonfields:
  id: MaxMind GeoIP2
  version: -1
name: MaxMind GeoIP2
display: MaxMind GeoIP2
category: Data Enrichment & Threat Intelligence
description: Enriches IP addresses
configuration:
- display: API Key
  name: apikey
  defaultvalue: ""
  type: 0
  required: true
- display: Account ID
  name: account
  defaultvalue: ""
  type: 0
  required: true
- display: Use system proxy
  name: proxy
  defaultvalue: ""
  type: 8
  required: false
- display: Trust any certificate (unsecure)
  name: insecure_new
  defaultvalue: ""
  type: 8
  required: false
- display: Service Version
  name: mode
  defaultvalue: city
  type: 15
  required: true
  options:
  - country
  - city
  - insights
- display: Base URL
  name: url
  defaultvalue: https://geoip.maxmind.com/
  type: 0
  required: true
script:
  script: |
    import requests
    from collections import defaultdict
    from requests.auth import HTTPBasicAuth
    # disable insecure warnings
    requests.packages.urllib3.disable_warnings()


    '''GLOBAL VARS'''
    BASE_URL = demisto.params().get('url')
    APIKEY = demisto.params().get('apikey')
    ACCOUNT_ID = demisto.params().get('account')
    MODE = demisto.params().get('mode')
    INSECURE = demisto.params().get('insecure', None) if demisto.params().get('insecure', None) else \
        not demisto.params().get('insecure_new')  # Backward compatibility issue, the old logic of insecure was reversed
    PROXY = demisto.params().get('proxy')
    API_VERSION = 'geoip/v2.1'

    if not demisto.params().get('proxy', False):
        del os.environ['HTTP_PROXY']
        del os.environ['HTTPS_PROXY']
        del os.environ['http_proxy']
        del os.environ['https_proxy']

    HR_HEADERS = [
        'IP',
        'Domain',
        'ASN',
        'Organization',
        'ISP',
        'Location',
        'Accuracy Radius',
        'User Type',
        'Continent',
        'ISO Code',
        'Country',
        'Registered Country',
        'TimeZone',
        'City',
        'Subdivision',
        'Is TOR Exit Node',
        'Is Hosting Provider',
        'Is Anonymous']

    HEADERS = {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
    }


    '''HELPER FUNCTIONS'''
    def http_request(query):
        r = requests.request(
            'GET',
            BASE_URL + API_VERSION + '/' + MODE +'/'+ query,
            headers=HEADERS,
            verify=INSECURE,
            auth=HTTPBasicAuth(ACCOUNT_ID, APIKEY)
        )
        if r.status_code is not 200:
            return_error('Error in API call to MaxMind, got status code - {} and a reason: {}'.format(r.status_code, r.reason))
        return r


    def create_map_entry(lat, lng):
        demisto.results({
            'Type': entryTypes['map'],
            'ContentsFormat': formats['json'],
            'Contents': {'lat': lat, 'lng': lng}
        })


    def format_results(res_json):
        hr = defaultdict()
        maxmind_ec = defaultdict(lambda: defaultdict(int))
        ip_ec = defaultdict(lambda: defaultdict(int))
        if 'continent' in res_json:
            continent = res_json['continent']
            hr['Continent'] = continent['names']['en']
            maxmind_ec['Geo']['Continent'] = continent['names']['en']
        if 'city' in res_json:
            city = res_json['city']
            hr['City'] = city['names']['en']
            maxmind_ec['Geo']['City'] = city['names']['en']
        if 'country' in res_json:
            country = res_json['country']
            hr['Country'] = country['names']['en']
            maxmind_ec['Geo']['Country'] = country['names']['en']
            ip_ec['Geo']['Country'] = country['names']['en']
        if 'location' in res_json:
            location = res_json['location']
            ip_ec['Geo']['Location'] = str(location['latitude'])+', '+str(location['longitude'])
            maxmind_ec['Geo']['Location'] = str(location['latitude'])+', '+str(location['longitude'])
            create_map_entry(location['latitude'], location['longitude'])
            if 'time_zone' in location:
                hr['TimeZone'] = location['time_zone']
                maxmind_ec['Geo']['TimeZone'] = location['time_zone']
            if 'accuracy_radius' in location:
                hr['Accuracy Radius'] = location['accuracy_radius']
                maxmind_ec['Geo']['Accuracy'] = location['accuracy_radius']
        if 'registered_country' in res_json:
            hr['ISO Code'] = res_json['registered_country']['iso_code']
            maxmind_ec['ISO_Code'] = res_json['registered_country']['iso_code']
            registration = res_json['registered_country']['names']['en']
            hr['Registered Country'] = registration
            maxmind_ec['RegisteredCountry'] = registration
        if 'subdivisions' in res_json:
            subs = res_json['subdivisions'][0]
            hr['Subdivision'] = subs['names']['en']
            maxmind_ec['Geo']['Subdivision'] = subs['names']['en']
        if 'traits' in res_json:
            traits = res_json['traits']
            if 'user_type' in traits:
                hr['User Type'] = traits['user_type']
                maxmind_ec['UserType'] = traits['user_type']
            if 'domain' in traits:
                hr['Domain'] = traits['domain']
                maxmind_ec['Domain'] = traits['domain']
            if 'is_anonymous' in traits:
                hr['Is Anonymous'] = traits['is_anonymous']
                maxmind_ec['Anonymous'] = traits['is_anonymous']
            if 'is_hosting_provider' in traits:
                hr['Is Hosting Provider'] = traits['is_hosting_provider']
                maxmind_ec['Host'] = traits['is_hosting_provider']
            if 'is_tor_exit_node' in traits:
                hr['Is TOR Exit Node'] = traits['is_tor_exit_node']
                maxmind_ec['Tor'] = traits['is_tor_exit_node']
            if 'autonomous_system_number' in traits:
                hr['ASN'] = traits['autonomous_system_number']
                ip_ec['ASN'] = traits['autonomous_system_number']
                maxmind_ec['ASN'] = traits['autonomous_system_number']
            if 'autonomous_system_organization' in traits:
                hr['Organization'] = traits['autonomous_system_organization']
                maxmind_ec['Organization'] = traits['autonomous_system_organization']
            hr['IP'] = traits['ip_address']
            ip_ec['Address'] = traits['ip_address']
            maxmind_ec['Address'] = traits['ip_address']
            if 'isp' in traits:
                hr['ISP'] = traits['isp']
                maxmind_ec['ISP'] = traits['isp']
        return hr, ip_ec, maxmind_ec



    ''' FUNCTIONS '''
    def get_geo_ip(query):
        raw = http_request(query)
        res_json = raw.json()
        return res_json


    def geo_ip_command():
        ip_query = demisto.args().get('ip')
        res_json = get_geo_ip(ip_query)
        hr, ip_ec, maxmind_ec = format_results(res_json)
        ec = ({
          'IP(val.Address && val.Address == obj.Address)': ip_ec,
          'MaxMind(val.Address && val.Address == obj.Address)': maxmind_ec
        })
        demisto.results({
            'Type': entryTypes['note'],
            'ContentsFormat': formats['markdown'],
            'Contents': res_json,
            'HumanReadable': tableToMarkdown('{} - Scan Results'.format(ip_query), hr, HR_HEADERS, removeNull=True),
            'EntryContext': ec
        })


    ''' EXECUTION CODE '''
    LOG('command is %s' % (demisto.command(), ))
    try:
        if demisto.command() == 'ip':
            geo_ip_command()
        if demisto.command() == 'test-module':
            raw = http_request('8.8.8.8')
            demisto.results('ok')
    except Exception as e:
        LOG(e)
        LOG.print_log(False)
        return_error(e.message)
  type: python
  commands:
  - name: ip
    arguments:
    - name: ip
      required: true
      description: IP Address to be queried
    outputs:
    - contextPath: IP.Address
      description: The IP address
      type: string
    - contextPath: IP.Geo.Country
      description: The IP country
      type: string
    - contextPath: IP.Geo.Location
      description: The IP geographic location in coordinates
      type: string
    - contextPath: IP.ASN
      description: The IP ASN
      type: string
    - contextPath: MaxMind.Geo.TimeZone
      description: The time zone the IP is located
      type: string
    - contextPath: MaxMind.Geo.Accuracy
      description: The accuracy of the location
      type: number
    - contextPath: MaxMind.Geo.Continent
      description: The IP Continent
      type: string
    - contextPath: MaxMind.Geo.Subdivision
      description: The IP subdivision
      type: string
    - contextPath: MaxMind.Organization
      description: The IP organization
      type: string
    - contextPath: MaxMind.Tor
      description: Is IP a Tor exit node?
      type: boolean
    - contextPath: MaxMind.Host
      description: The IP host
      type: string
    - contextPath: MaxMind.Anonymous
      description: Is the IP anonymous?
      type: boolean
    - contextPath: MaxMind.UserType
      description: The IP user type
      type: string
    - contextPath: MaxMind.ISP
      description: The IP ISP
      type: string
    - contextPath: MaxMind.Domain
      description: The domain associated to the IP
      type: string
    - contextPath: MaxMind.ISO_Code
      description: ISO code for the country the IP is located
      type: string
    - contextPath: MaxMind.RegisteredCountry
      description: Country the IP is registered
      type: string
    - contextPath: MaxMind.City
      description: City the IP is located in
      type: string
    description: Check IP reputation (when information is available, returns a JSON
      with details). Uses all configured Threat Intelligence feeds
  runonce: false
tests:
  - MaxMind Test
