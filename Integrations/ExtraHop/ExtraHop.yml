category: Network Security
commonfields:
  id: ExtraHop
  version: -1
configuration:
- display: API Key for instance
  name: apikey
  required: true
  type: 4
- display: Url for the Instance
  name: url
  required: true
  type: 0
- defaultvalue: 'false'
  display: Trust any certificate (Not Secure)
  name: insecure
  required: false
  type: 8
- defaultvalue: 'false'
  display: Use System Proxy
  name: proxy
  required: false
  type: 8
- defaultvalue: 7 days
  display: Days of initial alerts to fetch
  name: fetch_time
  required: true
  type: 0
- display: Fetch incidents
  name: isFetch
  required: false
  type: 8
- display: Incident type
  name: incidentType
  required: false
  type: 13
description: ExtraHop performs real-time stream analysis of the packets that carry
  data across a network.
display: ExtraHop
name: ExtraHop
script:
  commands:
  - deprecated: false
    description: Get alerts from ExtraHop
    execution: false
    name: extrahop-get-alerts
    outputs:
    - contextPath: Extrahop.Alert.Operator
      description: The logical operator applied when comparing the value of the operand
        field to alert conditions.
      type: String
    - contextPath: Extrahop.Alert.FieldName
      description: The name of the monitored metric.
      type: String
    - contextPath: Extrahop.Alert.NotifySnmp
      description: 'Indicates whether to send an SNMP trap when an alert is generated. '
      type: Boolean
    - contextPath: Extrahop.Alert.Operand
      description: The value to compare against alert conditions.
      type: String
    - contextPath: Extrahop.Alert.IntervalLength
      description: The length of the alert interval, expressed in seconds.
      type: Number
    - contextPath: Extrahop.Alert.Author
      description: 'The name of the user that created the alert. '
      type: String
    - contextPath: Extrahop.Alert.Name
      description: The unique, friendly name for the alert.
      type: String
    - contextPath: Extrahop.Alert.FieldName2
      description: The second monitored metric when applying a ratio.
      type: String
    - contextPath: Extrahop.Alert.RefireInterval
      description: The time interval in which alert conditions are monitored, expressed
        in seconds.
      type: Number
    - contextPath: Extrahop.Alert.ModTime
      description: 'The time of the most recent update, expressed in milliseconds
        since the epoch. '
      type: Number
    - contextPath: Extrahop.Alert.Units
      description: The interval in which to evaluate the alert condition.
      type: String
    - contextPath: Extrahop.Alert.ApplyAll
      description: Indicates whether the alert is assigned to all available data sources.
      type: Boolean
    - contextPath: Extrahop.Alert.Type
      description: The type of alert.
      type: String
    - contextPath: Extrahop.Alert.FieldOp
      description: The type of comparison between the field_name and field_name2 fields
        when applying a ratio.
      type: String
    - contextPath: Extrahop.Alert.Id
      description: The unique identifier for the alert.
      type: Number
    - contextPath: Extrahop.Alert.Disabled
      description: Indicates whether the alert is disabled.
      type: Boolean
    - contextPath: Extrahop.Alert.Description
      description: An optional description for the alert.
      type: String
    - contextPath: Extrahop.Alert.Severity
      description: The severity level of the alert
      type: Number
    - contextPath: Extrahop.Alert.StatName
      description: The statistic name for the alert
      type: String
  - arguments:
    - default: false
      description: The name of the field in the record to be filtered.
      isArray: false
      name: field
      required: false
      secret: false
    - default: false
      description: The value that the query attempts to match.
      isArray: false
      name: value
      required: false
      secret: false
    - default: false
      description: The compare method applied when matching the operand value against
        the field contents.
      isArray: false
      name: operator
      required: true
      secret: false
    - default: false
      description: The beginning timestamp of the time range the query will search,
        expressed in milliseconds since the epoch. A negative value specifies that
        the search will begin with records created at a time in the past. For example,
        specify -600000ms to begin the search with records created 10 minutes before
        the time of the request.
      isArray: false
      name: query_from
      required: true
      secret: false
    - default: false
      defaultValue: '20'
      description: Maximum amount of entries returned.
      isArray: false
      name: limit
      required: false
      secret: false
    deprecated: false
    description: Query records from ExtraHop
    execution: false
    name: extrahop-query
  - arguments:
    - default: false
      description: The beginning timestamp for the request. Return only devices active
        after this time. Time is expressed in milliseconds since the epoch.
      isArray: false
      name: active_from
      required: false
      secret: false
    - default: false
      description: The ending timestamp for the request.
      isArray: false
      name: active_until
      required: false
      secret: false
    - auto: PREDEFINED
      default: false
      defaultValue: any
      description: Indicates the field to search.
      isArray: false
      name: search_type
      predefined:
      - any
      - name
      - discovery_id
      - ip address
      - mac address
      - vendor
      - type
      - tag
      - activity
      - node
      - vlan
      required: true
      secret: false
    - default: false
      defaultValue: '10'
      description: Limit the number of devices returned to the specified maximum number.
      isArray: false
      name: limit
      required: false
      secret: false
    deprecated: false
    description: View Devices from ExtraHop
    execution: false
    name: extrahop-devices
  - arguments:
    - default: false
      description: IDs of resources to assign
      isArray: true
      name: add
      required: false
      secret: false
    - default: false
      description: IDs of resources to unassign
      isArray: true
      name: remove
      required: false
      secret: false
    deprecated: false
    description: Modify whitelist from ExtraHop
    execution: false
    name: extrahop-whitelist-modify
  - deprecated: false
    description: Retrieve whitelist from ExtraHop
    execution: false
    name: extrahop-whitelist-retrieve
    outputs:
    - contextPath: Extrahop.Device.Macaddr
      description: 'The MAC address for this device. '
      type: String
    - contextPath: Extrahop.Device.DeviceClass
      description: 'The class of this device. '
      type: String
    - contextPath: Extrahop.Device.UserModTime
      description: 'The time of the most recent update made by the user, expressed
        in milliseconds since the epoch. '
      type: Number
    - contextPath: Extrahop.Device.AutoRole
      description: 'The role automatically detected by the ExtraHop. '
      type: String
    - contextPath: Extrahop.Device.ParentId
      description: 'The unique identifier for the parent device object. '
      type: Number
    - contextPath: Extrahop.Device.Vendor
      description: The name of the vendor who created this device.
      type: String
    - contextPath: Extrahop.Device.AnalysisLevel
      description: Deprecated. Replaced by the analysis field.
      type: Number
    - contextPath: Extrahop.Device.DiscoveryId
      description: The unique identifier for the device, which is displayed as part
        of the device URL in the ExtraHop Web UI.
      type: String
    - contextPath: Extrahop.Device.DefaultName
      description: The default name for this device.
      type: String
    - contextPath: Extrahop.Device.DisplayName
      description: 'The display name chosen based on the running configuration settings. '
      type: String
    - contextPath: Extrahop.Device.OnWatchlist
      description: Indicates whether the device is on the watchlist.
      type: Boolean
    - contextPath: Extrahop.Device.ModTime
      description: 'The time of the most recent update, expressed in milliseconds
        since the epoch. '
      type: Number
    - contextPath: Extrahop.Device.IsL3
      description: 'Indicates whether the device is an L3 device. '
      type: Boolean
    - contextPath: Extrahop.Device.ExtrahopId
      description: Deprecated. Use the discover_id field instead.
      type: String
    - contextPath: Extrahop.Device.Role
      description: 'The role of the device. '
      type: String
    - contextPath: Extrahop.Device.DiscoverTime
      description: 'The time when the device was first discovered on the network,
        expressed in milliseconds since the epoch. '
      type: Number
    - contextPath: Extrahop.Device.Id
      description: The unique identifier for the device, which is displayed as the
        API ID on the device page in the ExtraHop Web UI .
      type: Number
    - contextPath: Extrahop.Device.Ipaddr4
      description: The IPv4 address for this device.
      type: String
    - contextPath: Extrahop.Device.DhcpName
      description: 'The DHCP name for this device. '
      type: String
    - contextPath: Extrahop.Device.Analysis
      description: 'The analysis level of the device. '
      type: String
    - contextPath: Extrahop.Device.Vlanid
      description: The unique identifier for the VLAN this device is associated with.
      type: Number
  - arguments:
    - auto: PREDEFINED
      default: false
      description: Indicates whether the alert is assigned to all available data sources.
      isArray: false
      name: apply_all
      predefined:
      - 'true'
      - 'false'
      required: true
      secret: false
    - auto: PREDEFINED
      default: false
      description: Indicates whether the alert is disabled.
      isArray: false
      name: disabled
      predefined:
      - 'true'
      - 'false'
      required: true
      secret: false
    - default: false
      description: The unique, friendly name for the alert.
      isArray: false
      name: name
      required: true
      secret: false
    - auto: PREDEFINED
      default: false
      description: Indicates whether to send an SNMP trap when an alert is generated.
      isArray: false
      name: notify_snmp
      predefined:
      - 'true'
      - 'false'
      required: true
      secret: false
    - auto: PREDEFINED
      default: false
      description: 'The time interval in which alert conditions are monitored, expressed
        in seconds. '
      isArray: false
      name: refire_interval
      predefined:
      - '300'
      - '600'
      - '900'
      - '1800'
      - '3600'
      - '7200'
      - '14400'
      required: true
      secret: false
    - default: false
      description: 'The severity level of the alert, which is displayed in the Alert
        History, email notifications, and SNMP traps. Supported values: 0, 1, 2, 3,
        4, 5, 6, 7'
      isArray: false
      name: severity
      required: true
      secret: false
    - auto: PREDEFINED
      default: false
      description: 'The type of alert. '
      isArray: false
      name: type
      predefined:
      - detection
      - threshold
      required: true
      secret: false
    - auto: PREDEFINED
      default: false
      description: 'The type of metric source monitored by the alert configuration.
        Only applicable to detection alerts. '
      isArray: false
      name: object_type
      predefined:
      - application
      - device
      required: false
      secret: false
    - default: false
      description: The list of monitored protocols. Only applicable to detection alerts.
      isArray: false
      name: protocols
      required: false
      secret: false
    - default: false
      description: The name of the monitored metric. Only applicable to threshold
        alerts.
      isArray: false
      name: field_name
      required: false
      secret: false
    - default: false
      description: The second monitored metric when applying a ratio. Only applicable
        to threshold alerts.
      isArray: false
      name: field_name2
      required: false
      secret: false
    - default: false
      description: The statistic name for the alert. Only applicable to threshold
        alerts.
      isArray: false
      name: stat_name
      required: false
      secret: false
    - auto: PREDEFINED
      default: false
      description: "The interval in which to evaluate the alert condition. Only applicable\
        \ to threshold alerts. \nSupported values: \"none\", \"period\", \"1 sec\"\
        , \"1 min\", \"1 hr\""
      isArray: false
      name: units
      predefined:
      - none
      - period
      - 1 sec
      - 1 min
      - 1 hr
      required: false
      secret: false
    - auto: PREDEFINED
      default: false
      defaultValue: '30'
      description: "The length of the alert interval, expressed in seconds. Only applicable\
        \ to threshold alerts. \nSupported values: 30, 60, 120, 300, 600, 900, 1200,\
        \ 1800"
      isArray: false
      name: interval_length
      predefined:
      - '30'
      - '60'
      - '120'
      - '300'
      - '600'
      - '900'
      - '1200'
      - '1800'
      required: false
      secret: false
    - default: false
      description: The value to compare against alert conditions. The compare method
        is specified by the value of the operator field. Only applicable to threshold
        alerts.
      isArray: false
      name: operand
      required: false
      secret: false
    - auto: PREDEFINED
      default: false
      description: The logical operator applied when comparing the value of the operand
        field to alert conditions. Only applicable to threshold alerts.
      isArray: false
      name: operator
      predefined:
      - ==
      - '>'
      - <
      - '>='
      - <=
      required: false
      secret: false
    - auto: PREDEFINED
      default: false
      description: The type of comparison between the field_name and field_name2 fields
        when applying a ratio. Only applicable to threshold alerts.
      isArray: false
      name: field_op
      predefined:
      - /
      - 'null'
      required: false
      secret: false
    - default: false
      description: The first alert parameter, which is either a key pattern or a data
        point. Only applicable to threshold alerts.
      isArray: false
      name: param
      required: false
      secret: false
    - default: false
      description: The second alert parameter, which is either a key pattern or a
        data point. Only applicable to threshold alerts.
      isArray: false
      name: param2
      required: false
      secret: false
    deprecated: false
    description: Add Alert to ExtraHop
    execution: false
    name: extrahop-add-alert
  - arguments:
    - default: false
      description: The unique identifier for the alert.
      isArray: false
      name: alert_id
      required: true
      secret: false
    - auto: PREDEFINED
      default: false
      description: Indicates whether the alert is assigned to all available data sources.
      isArray: false
      name: apply_all
      predefined:
      - 'true'
      - 'false'
      required: true
      secret: false
    - auto: PREDEFINED
      default: false
      description: Indicates whether the alert is disabled.
      isArray: false
      name: disabled
      predefined:
      - 'true'
      - 'false'
      required: true
      secret: false
    - default: false
      description: The unique, friendly name for the alert.
      isArray: false
      name: name
      required: true
      secret: false
    - auto: PREDEFINED
      default: false
      description: Indicates whether to send an SNMP trap when an alert is generated.
      isArray: false
      name: notify_snmp
      predefined:
      - 'true'
      - 'false'
      required: true
      secret: false
    - default: false
      description: The name of the monitored metric. Only applicable to threshold
        alerts.
      isArray: false
      name: field_name
      required: false
      secret: false
    - default: false
      description: The statistic name for the alert. Only applicable to threshold
        alerts.
      isArray: false
      name: stat_name
      required: false
      secret: false
    - auto: PREDEFINED
      default: false
      description: The interval in which to evaluate the alert condition. Only applicable
        to threshold alerts.
      isArray: false
      name: units
      predefined:
      - none
      - period
      - 1 sec
      - 1 min
      - 1 hr
      required: false
      secret: false
    - auto: PREDEFINED
      default: false
      description: 'The length of the alert interval, expressed in seconds. Only applicable
        to threshold alerts. '
      isArray: false
      name: interval_length
      predefined:
      - '30'
      - '60'
      - '120'
      - '300'
      - '600'
      - '900'
      - '1200'
      - '1800'
      required: false
      secret: false
    - default: false
      description: The value to compare against alert conditions. The compare method
        is specified by the value of the operator field. Only applicable to threshold
        alerts.
      isArray: false
      name: operand
      required: false
      secret: false
    - auto: PREDEFINED
      default: false
      description: The time interval in which alert conditions are monitored, expressed
        in seconds.
      isArray: false
      name: refire_interval
      predefined:
      - '300'
      - '600'
      - '900'
      - '1800'
      - '3600'
      - '7200'
      - '14400'
      required: true
      secret: false
    - auto: PREDEFINED
      default: false
      description: The severity level of the alert, which is displayed in the Alert
        History, email notifications, and SNMP traps.
      isArray: false
      name: severity
      predefined:
      - '0'
      - '1'
      - '2'
      - '3'
      - '4'
      - '5'
      - '6'
      - '7'
      required: true
      secret: false
    - auto: PREDEFINED
      default: false
      description: 'The type of alert. '
      isArray: false
      name: type
      predefined:
      - detection
      - threshold
      required: true
      secret: false
    - auto: PREDEFINED
      default: false
      description: The type of metric source monitored by the alert configuration.
        Only applicable to detection alerts.
      isArray: false
      name: object_type
      predefined:
      - application
      - device
      required: false
      secret: false
    - default: false
      description: The list of monitored protocols. Only applicable to detection alerts
      isArray: false
      name: protocols
      required: false
      secret: false
    - auto: PREDEFINED
      default: false
      description: The logical operator applied when comparing the value of the operand
        field to alert conditions. Only applicable to threshold alerts.
      isArray: false
      name: operator
      predefined:
      - ==
      - '>'
      - <
      - '>='
      - <=
      required: false
      secret: false
    - default: false
      description: The second monitored metric when applying a ratio. Only applicable
        to threshold alerts.
      isArray: false
      name: field_name2
      required: false
      secret: false
    - auto: PREDEFINED
      default: false
      description: The type of comparison between the field_name and field_name2 fields
        when applying a ratio. Only applicable to threshold alerts.
      isArray: false
      name: field_op
      predefined:
      - /
      - 'null'
      required: false
      secret: false
    - default: false
      description: The first alert parameter, which is either a key pattern or a data
        point. Only applicable to threshold alerts.
      isArray: false
      name: param
      required: false
      secret: false
    - default: false
      description: The second alert parameter, which is either a key pattern or a
        data point. Only applicable to threshold alerts.
      isArray: false
      name: param2
      required: false
      secret: false
    deprecated: false
    description: Modify alert in ExtraHop
    execution: false
    name: extrahop-modify-alert
  isfetch: true
  runonce: false
  script: |-
    import demistomock as demisto
    from CommonServerPython import *
    from CommonServerUserPython import *

    ''' IMPORTS '''

    import json
    import requests
    from distutils.util import strtobool

    # Disable insecure warnings
    requests.packages.urllib3.disable_warnings()

    ''' GLOBALS/PARAMS '''

    APIKEY = demisto.params().get('apikey')
    SERVER = demisto.params()['url'][:-1] if (demisto.params()['url'] and demisto.params()['url'].endswith('/')) else \
        demisto.params()['url']
    USE_SSL = not demisto.params().get('insecure', False)
    FETCH_TIME = demisto.params().get('fetch_time', '7 days')
    BASE_URL = SERVER + '/api/v1/'
    HEADERS = {
        'Accept': 'application/json',
        'Authorization': 'ExtraHop apikey={}'.format(APIKEY)
    }
    if not demisto.params().get('proxy'):
        del os.environ['HTTP_PROXY']
        del os.environ['HTTPS_PROXY']
        del os.environ['http_proxy']
        del os.environ['https_proxy']
    response = []

    ''' HELPER FUNCTIONS '''


    def http_request(method, url_suffix, data=None, payload=None):
        data = json.dumps(data)
        res = requests.request(
            method,
            BASE_URL + url_suffix,
            verify=USE_SSL,
            data=data,
            headers=HEADERS,
            params=payload
        )
        # Handle error responses gracefully
        if res.status_code == 204:
            return demisto.results('Successful Modification')
        if demisto.command() == 'extrahop-add-alert' or 'extrahop-modify-alert' and res.status_code == 400:
            resp = res.json()
            return_error('Error in request format - [%s]' % resp['error_message'])
        if demisto.command() == 'extrahop-add-alert' or 'extrahop-modify-alert' and res.status_code == 201:
            return demisto.results('Alert successfully added')
        elif res.status_code not in {200, 204, 201}:
            return_error('Error in API call to ExtraHop [%d] - %s' % (res.status_code, res.reason))
        return res


    ''' COMMANDS + REQUESTS FUNCTIONS '''


    def item_to_incident(item):
        epoch_occured = item.get('mod_time')
        incident = {
            'name': item.get('name'),
            'occurred': timestamp_to_datestring(epoch_occured),
            'rawJSON': json.dumps(item)}
        return incident


    def test_module():
        """
        Performs basic get request to check ExtraHop version
        """
        test_result = http_request('GET', 'extrahop')
        return test_result


    def get_alerts():
        res_raw = http_request('GET', 'alerts')
        res = res_raw.json()
        return res


    def paginate(can_paginate, cursor):
        while can_paginate is True:
            body = {
                "cursor": cursor,
                "context_ttl": 400000
            }
            res_raw = http_request('POST', 'records/cursor', body)
            res = res_raw.json()
            response.append(res)
            if 'cursor' in res:
                paginate(True, res['cursor'])
            else:
                break
            return response


    def query_records(field, value, operator, query_from, limit):
        data = {
            "filter": {
                "field": str(field),
                "operand": str(value),
                "operator": str(operator)
            },
            "from": int(query_from),
            "limit": int(limit)
        }
        res_raw = http_request('POST', 'records/search', data)
        res = res_raw.json()
        response.append(res)
        if 'cursor' in res:
            response.append(paginate(True, res['cursor']))
        return response


    def devices():
        active_from = demisto.args().get('active_from')
        active_until = demisto.args().get('active_until')
        search_type = demisto.args().get('search_type')
        limit = demisto.args().get('limit')
        payload = {}
        if active_from:
            payload['active_from'] = active_from
        if active_until:
            payload['active_until'] = active_until
        if limit:
            payload['limit'] = limit
        payload['search_type'] = search_type
        res_raw = http_request('GET', 'devices', data=None, payload=payload)
        res = res_raw.json()
        return res


    def format_alerts(alerts):
        for alert in alerts:
            hr = tableToMarkdown('Found Alert', alert, headerTransform=string_to_table_header, removeNull=True)
            ec = {
                "Extrahop": {
                    "Alert": createContext(alert, keyTransform=string_to_context_key, removeNull=True)
                }
            }
            demisto.results({
                'Type': entryTypes['note'],
                'ContentsFormat': formats['markdown'],
                'Contents': alert,
                'HumanReadable': hr,
                'EntryContext': ec
            })
        if len(alerts) == 0:
            demisto.results('No results were found')


    def format_device_results(data):
        for device in data:
            hr = tableToMarkdown('Found Device', device, headerTransform=string_to_table_header, removeNull=True)
            ec = {
                "Extrahop": {
                    "Device": createContext(device, keyTransform=string_to_context_key, removeNull=True)
                }
            }
            demisto.results({
                'Type': entryTypes['note'],
                'ContentsFormat': formats['markdown'],
                'Contents': device,
                'HumanReadable': hr,
                'EntryContext': ec
            })


    def devices_command():
        found_devices = devices()
        format_device_results(found_devices)


    def whitelist_modify(add, remove):
        assignments = {}
        if add:
            add_items = add.split(',')
            add_items = list(map(int, add_items))
            assignments['assign'] = add_items
        if remove:
            remove_items = remove.split(',')
            remove_items = list(map(int, remove_items))
            assignments['unassign'] = remove_items
        res = http_request('POST', 'whitelist/devices', data=assignments)
        return res


    def whitelist_modify_command():
        add = demisto.args().get('add')
        remove = demisto.args().get('remove')
        whitelist_modify(add, remove)


    def whitelist_retrieve():
        res_raw = http_request('GET', 'whitelist/devices')
        res = res_raw.json()
        return res


    def whitelist_retrieve_command():
        res = whitelist_retrieve()
        if len(res) == 0:
            demisto.results('No devices found in whitelist')
        elif len(res) > 0:
            format_device_results(res)


    def query_records_command():
        field = demisto.args().get('field')
        value = demisto.args().get('value')
        operator = demisto.args().get('operator')
        query_from = demisto.args().get('query_from')
        limit = demisto.args().get('limit')
        res = query_records(field, value, operator, query_from, limit)
        source = res[0]['records']
        hr = ''
        ec = {
            "ExtraHop": {
                "Query": []
            }
        }
        for record in source:
            hr += tableToMarkdown('Incident result for ID {}'.format(record['_id']), record['_source'])
            ec['ExtraHop']['Query'].append(createContext(record, keyTransform=string_to_context_key, removeNull=True))
        demisto.results({
            'Type': entryTypes['note'],
            'ContentsFormat': formats['markdown'],
            'Contents': source,
            'HumanReadable': hr,
            'EntryContext': createContext(ec, removeNull=True)
        })


    def get_alerts_command():
        res = get_alerts()
        format_alerts(res)


    def add_alert(apply_all, disabled, name, notify_snmp, refire_interval, severity, alert_type, object_type,
                  protocols, field_name, stat_name, units, interval_length, operand, operator, field_name2, field_op,
                  param, param2, alert_id=None):
        data = {
            "apply_all": apply_all,
            "disabled": disabled,
            "name": name,
            "notify_snmp": notify_snmp,
            "refire_interval": int(refire_interval),
            "severity": int(severity),
            "type": alert_type
        }
        if alert_type == 'detection':
            data['object_type'] = object_type
            data['protocols'] = [str(protocols)]
        elif alert_type == 'threshold':
            data['field_name'] = field_name
            data['stat_name'] = stat_name
            data['units'] = units
            data['interval_length'] = int(interval_length)
            data['operand'] = operand
            data['operator'] = operator
            if demisto.args().get('field_name2'):
                data['field_name2'] = field_name2
            if demisto.args().get('field_op'):
                data['field_op'] = field_op
            if demisto.args().get('param'):
                data['param'] = param
            if demisto.args().get('param2'):
                data['param2'] = param2
        if alert_id:
            res = http_request('PATCH', 'alerts/{}'.format(alert_id), data=data)
        else:
            res = http_request('POST', 'alerts', data=data)
        return res


    def add_alert_command():
        apply_all = bool(strtobool(demisto.args().get('apply_all', False)))
        disabled = bool(strtobool(demisto.args().get('disabled', False)))
        name = demisto.args().get('name')
        notify_snmp = bool(strtobool(demisto.args().get('notify_snmp', False)))
        field_name = demisto.args().get('field_name')
        stat_name = demisto.args().get('stat_name')
        units = demisto.args().get('units')
        interval_length = demisto.args().get('interval_length')
        operand = demisto.args().get('operand')
        refire_interval = demisto.args().get('refire_interval')
        severity = demisto.args().get('severity')
        alert_type = demisto.args().get('type')
        object_type = demisto.args().get('object_type')
        protocols = demisto.args().get('protocols')
        operator = demisto.args().get('operator')
        field_name2 = demisto.args().get('field_name2')
        field_op = demisto.args().get('field_op')
        param = demisto.args().get('param')
        param2 = demisto.args().get('param2')
        add_alert(apply_all, disabled, name, notify_snmp, refire_interval, severity, alert_type, object_type,
                  protocols, field_name, stat_name, units, interval_length, operand, operator, field_name2, field_op,
                  param, param2)


    def modify_alert_command():
        alert_id = demisto.args().get('alert_id')
        apply_all = bool(strtobool(demisto.args().get('apply_all', False)))
        disabled = bool(strtobool(demisto.args().get('disabled', False)))
        name = demisto.args().get('name')
        notify_snmp = bool(strtobool(demisto.args().get('notify_snmp', False)))
        field_name = demisto.args().get('field_name')
        stat_name = demisto.args().get('stat_name')
        units = demisto.args().get('units')
        interval_length = demisto.args().get('interval_length')
        operand = demisto.args().get('operand')
        refire_interval = demisto.args().get('refire_interval')
        severity = demisto.args().get('severity')
        alert_type = demisto.args().get('type')
        object_type = demisto.args().get('object_type')
        protocols = demisto.args().get('protocols')
        operator = demisto.args().get('operator')
        field_name2 = demisto.args().get('field_name2')
        field_op = demisto.args().get('field_op')
        param = demisto.args().get('param')
        param2 = demisto.args().get('param2')
        add_alert(apply_all, disabled, name, notify_snmp, refire_interval, severity, alert_type, object_type,
                  protocols, field_name, stat_name, units, interval_length, operand, operator, field_name2, field_op,
                  param, param2, alert_id)


    def fetch_incidents():
        last_run = demisto.getLastRun()
        last_fetch = last_run.get('time')

        # Handle first time fetch, fetch incidents retroactively
        if last_fetch is None:
            last_fetch, _ = parse_date_range(FETCH_TIME, to_timestamp=True)

        incidents = []
        items = get_alerts()
        for item in items:
            incident = item_to_incident(item)
            incident_date = date_to_timestamp(incident['occurred'], '%Y-%m-%dT%H:%M:%S.%fZ')
            # Update last run and add incident if the incident is newer than last fetch
            if incident_date > last_fetch:
                last_fetch = incident_date
                incidents.append(incident)

        demisto.setLastRun({'time': last_fetch})
        demisto.incidents(incidents)


    ''' COMMANDS MANAGER / SWITCH PANEL '''
    LOG('Command being called is %s' % (demisto.command()))
    try:
        if demisto.command() == 'test-module':
            test_module()
            demisto.results('ok')
        elif demisto.command() == 'fetch-incidents':
            fetch_incidents()
        elif demisto.command() == 'extrahop-get-alerts':
            get_alerts_command()
        elif demisto.command() == 'extrahop-query':
            query_records_command()
        elif demisto.command() == 'extrahop-devices':
            devices_command()
        elif demisto.command() == 'extrahop-whitelist-modify':
            whitelist_modify_command()
        elif demisto.command() == 'extrahop-whitelist-retrieve':
            whitelist_retrieve_command()
        elif demisto.command() == 'extrahop-add-alert':
            add_alert_command()
        elif demisto.command() == 'extrahop-modify-alert':
            modify_alert_command()

    # Log exceptions
    except Exception, e:
        LOG(e.message)
        LOG.print_log()
        raise
  type: python
releaseNotes: '-'
tests:
- ExtraHop-Test
