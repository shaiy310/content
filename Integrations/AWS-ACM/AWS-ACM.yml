commonfields:
  id: AWS - ACM
  version: -1
name: AWS - ACM
display: AWS - ACM
category: IT Services
description: Amazon Web Services Certificate Manager Service (acm)
configuration:
- display: Default Region
  name: defaultRegion
  defaultvalue: ""
  type: 0
  required: true
- display: Role Arn
  name: roleArn
  defaultvalue: ""
  type: 0
  required: false
- display: Role Session Name
  name: roleSessionName
  defaultvalue: ""
  type: 0
  required: false
- display: Role Session Duration
  name: sessionDuration
  defaultvalue: ""
  type: 0
  required: false
script:
  script: |-
    ''' IMPORTS '''
    import boto3
    import datetime

    '''GLOBAL VARIABLES'''
    AWS_DEFAULT_REGION = demisto.params()['defaultRegion']
    AWS_roleArn = demisto.params()['roleArn']
    AWS_roleSessionName = demisto.params()['roleSessionName']
    AWS_roleSessionDuration = demisto.params()['sessionDuration']
    AWS_rolePolicy = None


    def aws_session(service='acm', region=None, roleArn=None, roleSessionName=None, roleSessionDuration=None,
                    rolePolicy=None):
        kwargs = {}
        if roleArn and roleSessionName is not None:
            kwargs.update({
                'RoleArn': roleArn,
                'RoleSessionName': roleSessionName,
            })
        elif AWS_roleArn and AWS_roleSessionName is not None:
            kwargs.update({
                'RoleArn': AWS_roleArn,
                'RoleSessionName': AWS_roleSessionName,
            })

        if roleSessionDuration is not None:
            kwargs.update({'DurationSeconds': int(roleSessionDuration)})
        elif AWS_roleSessionDuration is not None:
            kwargs.update({'DurationSeconds': int(AWS_roleSessionDuration)})

        if rolePolicy is not None:
            kwargs.update({'Policy': rolePolicy})
        elif AWS_rolePolicy is not None:
            kwargs.update({'Policy': AWS_rolePolicy})

        if kwargs:
            sts_client = boto3.client('sts')
            sts_response = sts_client.assume_role(**kwargs)
            if region is not None:
                client = boto3.client(
                    service_name=service,
                    region_name=region,
                    aws_access_key_id=sts_response['Credentials']['AccessKeyId'],
                    aws_secret_access_key=sts_response['Credentials']['SecretAccessKey'],
                    aws_session_token=sts_response['Credentials']['SessionToken']
                )
            else:
                client = boto3.client(
                    service_name=service,
                    region_name=AWS_DEFAULT_REGION,
                    aws_access_key_id=sts_response['Credentials']['AccessKeyId'],
                    aws_secret_access_key=sts_response['Credentials']['SecretAccessKey'],
                    aws_session_token=sts_response['Credentials']['SessionToken']
                )
        else:
            if region is not None:
                client = boto3.client(service_name=service, region_name=region)
            else:
                client = boto3.client(service_name=service, region_name=AWS_DEFAULT_REGION)
        return client


    def parse_tag_field(tags_str):
        tags = []
        regex = re.compile(r'key=([\w\d_:.-]+),value=([ /\w\d@_,.\*-]+)', flags=re.I)
        for f in tags_str.split(';'):
            match = regex.match(f)
            if match is None:
                demisto.log('could not parse field: %s' % (f,))
                continue

            tags.append({
                'Key': match.group(1),
                'Value': match.group(2)
            })
        return tags


    def parse_subnet_mappings(subnets_str):
        subnets = []
        regex = re.compile(r'subnetid=([\w\d_:.-]+),allocationid=([ /\w\d@_,.*-]+)', flags=re.I)
        for f in subnets_str.split(';'):
            match = regex.match(f)
            if match is None:
                demisto.log('could not parse field: %s' % (f,))
                continue

            subnets.append({
                'SubnetId': match.group(1),
                'AllocationId': match.group(2)
            })
        return subnets


    class DatetimeEncoder(json.JSONEncoder):
        def default(self, obj):
            if isinstance(obj, datetime.datetime):
                return obj.strftime('%Y-%m-%dT%H:%M:%S')
            elif isinstance(obj, datetime.date):
                return obj.strftime('%Y-%m-%d')
            elif isinstance(obj, datetime):
                return obj.strftime('%Y-%m-%dT%H:%M:%S')
            elif isinstance(obj, date):
                return obj.strftime('%Y-%m-%d')
            # Let the base class default method raise the TypeError
            return json.JSONEncoder.default(self, obj)


    def parse_resource_ids(resource_id):
        id_list = resource_id.replace(" ", "")
        resource_ids = id_list.split(",")
        return resource_ids


    def create_entry(title, data, ec):
        return {
            'ContentsFormat': formats['json'],
            'Type': entryTypes['note'],
            'Contents': data,
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': tableToMarkdown(title, data) if data else 'No result were found',
            'EntryContext': ec
        }


    '''MAIN FUNCTIONS'''


    def describe_certificate(args):
        client = aws_session(
            region=args.get('region'),
            roleArn=args.get('roleArn'),
            roleSessionName=args.get('roleSessionName'),
            roleSessionDuration=args.get('roleSessionDuration'),
        )
        obj = vars(client._client_config)

        response = client.describe_certificate(CertificateArn=args.get('certificateArn'))
        cert = response['Certificate']
        data = ({
            'CertificateArn': cert['CertificateArn'],
            'DomainName': cert['DomainName'],
            'Serial': cert['Serial'],
            'Subject': cert['Subject'],
            'Issuer': cert['Issuer'],
            'Status': cert['Status'],
            'KeyAlgorithm': cert['KeyAlgorithm'],
            'SignatureAlgorithm': cert['SignatureAlgorithm'],
            'Type': cert['Type'],
            'Region': obj['_user_provided_options']['region_name'],
        })

        raw = json.loads(json.dumps(response['Certificate'], cls=DatetimeEncoder))
        if raw:
            raw.update({'Region': obj['_user_provided_options']['region_name']})
        ec = {'AWS.ACM.Certificates(val.CertificateArn === obj.CertificateArn)': raw}
        demisto.results(create_entry('AWS ACM Certificates', data, ec))


    def list_certificates(args):
        client = aws_session(
            region=args.get('region'),
            roleArn=args.get('roleArn'),
            roleSessionName=args.get('roleSessionName'),
            roleSessionDuration=args.get('roleSessionDuration'),
        )
        obj = vars(client._client_config)
        kwargs = {}
        data = []
        includes = {}

        if args.get('certificateStatuses') is not None:
            kwargs.update({'CertificateStatuses': args.get('certificateStatuses')})
        if args.get('extendedKeyUsage') is not None:
            includes.update({'extendedKeyUsage': [args.get('extendedKeyUsage')]})
        if args.get('keyUsage') is not None:
            includes.update({'keyUsage': [args.get('keyUsage')]})
        if args.get('keyTypes') is not None:
            includes.update({'keyTypes': [args.get('keyTypes')]})
        if includes:
            kwargs.update({'Includes': includes})

        response = client.list_certificates(**kwargs)
        for cert in response['CertificateSummaryList']:
            data.append({
                'CertificateArn': cert['CertificateArn'],
                'DomainName': cert['DomainName'],
                'Region': obj['_user_provided_options']['region_name'],
            })

        ec = {'AWS.ACM.Certificates(val.CertificateArn === obj.CertificateArn)': data}
        demisto.results(create_entry('AWS ACM Certificates', data, ec))


    def add_tags_to_certificate(args):
        client = aws_session(
            region=args.get('region'),
            roleArn=args.get('roleArn'),
            roleSessionName=args.get('roleSessionName'),
            roleSessionDuration=args.get('roleSessionDuration'),
        )
        kwargs = {
            'CertificateArn': args.get('certificateArn'),
            'Tags': parse_tag_field(args.get('tags'))
        }
        response = client.add_tags_to_certificate(**kwargs)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            demisto.results("The Certificate was Tagged successfully")


    def remove_tags_from_certificate(args):
        client = aws_session(
            region=args.get('region'),
            roleArn=args.get('roleArn'),
            roleSessionName=args.get('roleSessionName'),
            roleSessionDuration=args.get('roleSessionDuration'),
        )
        kwargs = {
            'CertificateArn': args.get('certificateArn'),
            'Tags': parse_tag_field(args.get('tags'))
        }
        response = client.remove_tags_from_certificate(**kwargs)
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            demisto.results("The Certificate Tags were removed successfully")


    def list_tags_for_certificate(args):
        client = aws_session(
            region=args.get('region'),
            roleArn=args.get('roleArn'),
            roleSessionName=args.get('roleSessionName'),
            roleSessionDuration=args.get('roleSessionDuration'),
        )

        kwargs = {'CertificateArn': args.get('certificateArn')}
        response = client.list_tags_for_certificate(**kwargs)

        data = ({'CertificateArn': args.get('certificateArn')})
        for tag in response['Tags']:
            data.update({
                tag['Key']: tag['Value']
            })

        ec = {'AWS.ACM.Certificates(val.CertificateArn === obj.CertificateArn).Tags': data}
        demisto.results(create_entry('AWS ACM Certificate Tags', data, ec))


    def get_certificate(args):
        client = aws_session(
            region=args.get('region'),
            roleArn=args.get('roleArn'),
            roleSessionName=args.get('roleSessionName'),
            roleSessionDuration=args.get('roleSessionDuration'),
        )

        kwargs = {'CertificateArn': args.get('certificateArn')}
        response = client.get_certificate(**kwargs)

        data = ({
            'CertificateArn': args.get('certificateArn'),
            'Certificate': response['Certificate'],
            'CertificateChain': response['CertificateChain']
        })

        ec = {'AWS.ACM.Certificates(val.CertificateArn === obj.CertificateArn)': data}
        demisto.results(create_entry('AWS ACM Certificate', data, ec))


    def test_function():
        client = aws_session()
        response = client.list_certificates()
        if response['ResponseMetadata']['HTTPStatusCode'] == 200:
            demisto.results('ok')


    '''EXECUTION BLOCK'''
    try:
        if demisto.command() == 'test-module':
            test_function()
        if demisto.command() == 'aws-acm-describe-certificate':
            describe_certificate(demisto.args())
        if demisto.command() == 'aws-acm-list-certificates':
            list_certificates(demisto.args())
        if demisto.command() == 'aws-acm-add-tags-to-certificate':
            add_tags_to_certificate(demisto.args())
        if demisto.command() == 'aws-acm-remove-tags-from-certificate':
            remove_tags_from_certificate(demisto.args())
        if demisto.command() == 'aws-acm-list-tags-for-certificate':
            list_tags_for_certificate(demisto.args())
        if demisto.command() == 'aws-acm-get-certificate':
            get_certificate(demisto.args())
    except Exception as e:
        LOG(e)
        LOG.print_log(False)
        return_error(e.message)

  type: python
  commands:
  - name: aws-acm-describe-certificate
    arguments:
    - name: certificateArn
      required: true
      description: The Amazon Resource Name (ARN) of the ACM certificate.
    - name: region
      description: The AWS Region, if not specified the default region will be used.
    - name: roleArn
      description: The Amazon Resource Name (ARN) of the role to assume.
    - name: roleSessionName
      description: An identifier for the assumed role session.
    - name: roleSessionDuration
      description: The duration, in seconds, of the role session. The value can range
        from 900 seconds (15 minutes) up to the maximum session duration setting for
        the role.
    outputs:
    - contextPath: AWS.ACM.Certificates.CertificateArn
      description: he Amazon Resource Name (ARN) of the certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.DomainName
      description: The fully qualified domain name for the certificate, such as www.example.com
        or example.com.
      type: string
    - contextPath: AWS.ACM.Certificates.SubjectAlternativeNames
      description: One or more domain names (subject alternative names) included in
        the certificate. This list contains the domain names that are bound to the
        public key that is contained in the certificate. The subject alternative names
        include the canonical domain name (CN) of the certificate and additional domain
        names that can be used to connect to the website.
      type: string
    - contextPath: AWS.ACM.Certificates.DomainValidationOptions.DomainName
      description: A fully qualified domain name (FQDN) in the certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.DomainValidationOptions.ValidationEmails
      description: A list of email addresses that ACM used to send domain validation
        emails.
      type: string
    - contextPath: AWS.ACM.Certificates.DomainValidationOptions.ValidationDomain
      description: The domain name that ACM used to send domain validation emails.
      type: string
    - contextPath: AWS.ACM.Certificates.DomainValidationOptions.ValidationStatu
      description: The validation status of the domain name.
      type: string
    - contextPath: AWS.ACM.Certificates.DomainValidationOptions.ResourceRecord.Name
      description: The name of the DNS record to create in your domain. This is supplied
        by ACM.
      type: string
    - contextPath: AWS.ACM.Certificates.DomainValidationOptions.ResourceRecord.Type
      description: The type of DNS record. Currently this can be CNAME.
      type: string
    - contextPath: AWS.ACM.Certificates.DomainValidationOptions.ResourceRecord.Value
      description: The value of the CNAME record to add to your DNS database. This
        is supplied by ACM.
      type: string
    - contextPath: AWS.ACM.Certificates.DomainValidationOptions.ValidationMethod
      description: Specifies the domain validation method.
      type: string
    - contextPath: AWS.ACM.Certificates.Serial
      description: The serial number of the certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.Subject
      description: The name of the entity that is associated with the public key contained
        in the certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.Issuer
      description: The name of the certificate authority that issued and signed the
        certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.CreatedAt
      description: The time at which the certificate was requested. This value exists
        only when the certificate type is AMAZON_ISSUED .
      type: date
    - contextPath: AWS.ACM.Certificates.IssuedAt
      description: The time at which the certificate was issued. This value exists
        only when the certificate type is AMAZON_ISSUED .
      type: date
    - contextPath: AWS.ACM.Certificates.ImportedAt
      description: The date and time at which the certificate was imported. This value
        exists only when the certificate type is IMPORTED.
      type: date
    - contextPath: AWS.ACM.Certificates.Status
      description: The status of the certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.RevokedAt
      description: The time at which the certificate was revoked. This value exists
        only when the certificate status is REVOKED.
      type: date
    - contextPath: AWS.ACM.Certificates.RevocationReason
      description: The reason the certificate was revoked. This value exists only
        when the certificate status is REVOKED.
      type: string
    - contextPath: AWS.ACM.Certificates.NotBefore
      description: The time before which the certificate is not valid.
      type: date
    - contextPath: AWS.ACM.Certificates.NotAfter
      description: The time after which the certificate is not valid.
      type: date
    - contextPath: AWS.ACM.Certificates.KeyAlgorithm
      description: The algorithm that was used to generate the public-private key
        pair.
      type: string
    - contextPath: AWS.ACM.Certificates.SignatureAlgorithm
      description: The algorithm that was used to sign the certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.InUseBy
      description: A list of ARNs for the AWS resources that are using the certificate.
        A certificate can be used by multiple AWS resources.
      type: string
    - contextPath: AWS.ACM.Certificates.FailureReason
      description: The reason the certificate request failed.
      type: string
    - contextPath: AWS.ACM.Certificates.Type
      description: The source of the certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.RenewalSummary.RenewalStatus
      description: The status of ACM's managed renewal of the certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.RenewalSummary.DomainValidationOptions.DomainName
      description: A fully qualified domain name (FQDN) in the certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.RenewalSummary.DomainValidationOptions.ValidationEmails
      description: A list of email addresses that ACM used to send domain validation
        emails.
      type: string
    - contextPath: AWS.ACM.Certificates.RenewalSummary.DomainValidationOptions.ValidationDomain
      description: The domain name that ACM used to send domain validation emails.
      type: string
    - contextPath: AWS.ACM.Certificates.RenewalSummary.DomainValidationOptions.ValidationStatus
      description: The validation status of the domain name.
      type: string
    - contextPath: AWS.ACM.Certificates.RenewalSummary.DomainValidationOptions.ResourceRecord.Name
      description: The name of the DNS record to create in your domain. This is supplied
        by ACM.
      type: string
    - contextPath: AWS.ACM.Certificates.RenewalSummary.DomainValidationOptions.ResourceRecord.Type
      description: The type of DNS record.
      type: string
    - contextPath: AWS.ACM.Certificates.RenewalSummary.DomainValidationOptions.ResourceRecord.Value
      description: The value of the CNAME record to add to your DNS database. This
        is supplied by ACM.
      type: string
    - contextPath: AWS.ACM.Certificates.RenewalSummary.DomainValidationOptions.ValidationMethod
      description: Specifies the domain validation method.
      type: string
    - contextPath: AWS.ACM.Certificates.KeyUsages.Name
      description: A list of Key Usage X.509 v3 extension objects. Each object is
        a string value that identifies the purpose of the public key contained in
        the certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.ExtendedKeyUsages.Name
      description: The name of an Extended Key Usage value.
      type: string
    - contextPath: AWS.ACM.Certificates.ExtendedKeyUsages.OID
      description: An object identifier (OID) for the extension value. OIDs are strings
        of numbers separated by periods.
    - contextPath: AWS.ACM.Certificates.CertificateAuthorityArn
      description: The Amazon Resource Name (ARN) of the ACM PCA private certificate
        authority (CA) that issued the certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.RenewalEligibility
      description: Specifies whether the certificate is eligible for renewal.
      type: string
    - contextPath: AWS.ACM.Certificates.Options.CertificateTransparencyLoggingPreference
      description: You can opt out of certificate transparency logging by specifying
        the DISABLED option. Opt in by specifying ENABLED.
      type: string
    description: Returns detailed metadata about the specified ACM certificate.
  - name: aws-acm-list-certificates
    arguments:
    - name: certificateStatuses
      auto: PREDEFINED
      predefined:
      - PENDING_VALIDATION
      - ISSUED
      - INACTIVE
      - EXPIRED
      - VALIDATION_TIMED_OUT
      - REVOKED
      - FAILED
      description: Filter the certificate list by status value.
    - name: extendedKeyUsage
      auto: PREDEFINED
      predefined:
      - TLS_WEB_SERVER_AUTHENTICATION
      - TLS_WEB_CLIENT_AUTHENTICATION
      - CODE_SIGNING
      - EMAIL_PROTECTION
      - TIME_STAMPING
      - OCSP_SIGNING
      - IPSEC_END_SYSTEM
      - IPSEC_TUNNEL
      - IPSEC_USER
      - ANY
      - NONE
      - CUSTOM
      description: Specify one or more ExtendedKeyUsage extension values.
    - name: keyUsage
      auto: PREDEFINED
      predefined:
      - DIGITAL_SIGNATURE
      - NON_REPUDIATION
      - KEY_ENCIPHERMENT
      - DATA_ENCIPHERMENT
      - KEY_AGREEMENT
      - CERTIFICATE_SIGNING
      - CRL_SIGNING
      - ENCIPHER_ONLY
      - DECIPHER_ONLY
      - ANY
      - CUSTOM
      description: Specify one or more KeyUsage extension values.
    - name: keyTypes
      auto: PREDEFINED
      predefined:
      - RSA_2048
      - RSA_1024
      - RSA_4096
      - EC_prime256v1
      - EC_secp384r1
      - EC_secp521r1
      description: Specify one or more algorithms that can be used to generate key
        pairs.
    - name: region
      description: The AWS Region, if not specified the default region will be used.
    - name: roleArn
      description: The Amazon Resource Name (ARN) of the role to assume.
    - name: roleSessionName
      description: An identifier for the assumed role session.
    - name: roleSessionDuration
      description: The duration, in seconds, of the role session. The value can range
        from 900 seconds (15 minutes) up to the maximum session duration setting for
        the role.
    outputs:
    - contextPath: AWS.ACM.Certificates.CertificateArn
      description: Amazon Resource Name (ARN) of the certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.DomainName
      description: Fully qualified domain name (FQDN), such as www.example.com or
        example.com, for the certificate.
      type: string
    - contextPath: AWS.ACM.Certificates.Region
      description: The AWS region were the certificate is located.
    description: Retrieves a list of certificate ARNs and domain names. You can request
      that only certificates that match a specific status be listed. You can also
      filter by specific attributes of the certificate.
  - name: aws-acm-add-tags-to-certificate
    arguments:
    - name: certificateArn
      required: true
      description: String that contains the ARN of the ACM certificate to which the
        tag is to be applied.
    - name: tags
      required: true
      description: The key-value pair that defines the tag. The tag value is optional.
    - name: region
      description: The AWS Region, if not specified the default region will be used.
    - name: roleArn
      description: The Amazon Resource Name (ARN) of the role to assume.
    - name: roleSessionName
      description: An identifier for the assumed role session.
    - name: roleSessionDuration
      description: The duration, in seconds, of the role session. The value can range
        from 900 seconds (15 minutes) up to the maximum session duration setting for
        the role.
    description: Adds one or more tags to an ACM certificate.
    execution: true
  - name: aws-acm-remove-tags-from-certificate
    arguments:
    - name: certificateArn
      required: true
      description: The ARN of the ACM Certificate with one or more tags that you want
        to remove.
    - name: tags
      required: true
      description: The key-value pair that defines the tag to remove.
    - name: region
      description: The AWS Region, if not specified the default region will be used.
    - name: roleArn
      description: The Amazon Resource Name (ARN) of the role to assume.
    - name: roleSessionName
      description: An identifier for the assumed role session.
    - name: roleSessionDuration
      description: The duration, in seconds, of the role session. The value can range
        from 900 seconds (15 minutes) up to the maximum session duration setting for
        the role.
    description: Remove one or more tags from an ACM certificate.
    execution: true
  - name: aws-acm-list-tags-for-certificate
    arguments:
    - name: certificateArn
      required: true
      description: The ARN of the ACM certificate for which you want to list the tags.
    - name: region
      description: The AWS Region, if not specified the default region will be used.
    - name: roleArn
      description: The Amazon Resource Name (ARN) of the role to assume.
    - name: roleSessionName
      description: An identifier for the assumed role session.
    - name: roleSessionDuration
      description: The duration, in seconds, of the role session. The value can range
        from 900 seconds (15 minutes) up to the maximum session duration setting for
        the role.
    outputs:
    - contextPath: AWS.ACM.Certificates.Tags.Key
      description: The key of the tag.
      type: string
    - contextPath: AWS.ACM.Certificates.Tags.Value
      description: The value of the tag.
      type: string
    description: Lists the tags that have been applied to the ACM certificate. Use
      the certificate's Amazon Resource Name (ARN) to specify the certificate.
  - name: aws-acm-get-certificate
    arguments:
    - name: certificateArn
      required: true
      description: The ARN of the certificate.
    - name: region
      description: The AWS Region, if not specified the default region will be used.
    - name: roleArn
      description: The Amazon Resource Name (ARN) of the role to assume.
    - name: roleSessionName
      description: An identifier for the assumed role session.
    - name: roleSessionDuration
      description: The duration, in seconds, of the role session. The value can range
        from 900 seconds (15 minutes) up to the maximum session duration setting for
        the role.
    outputs:
    - contextPath: AWS.ACM.Certificates.Certificate
      description: String that contains the ACM certificate represented by the ARN
        specified at input.
      type: string
    - contextPath: AWS.ACM.Certificates.CertificateChain
      description: The certificate chain that contains the root certificate issued
        by the certificate authority (CA).
      type: string
    description: Retrieves a certificate specified by an ARN and its certificate chain
      . The chain is an ordered list of certificates that contains the end entity
      certificate, intermediate certificates of subordinate CAs, and the root certificate
      in that order. The certificate and certificate chain are base64 encoded. If
      you want to decode the certificate to see the individual fields, you can use
      OpenSSL.
  dockerimage: demisto/boto3
  runonce: false
tests:
  - No test
