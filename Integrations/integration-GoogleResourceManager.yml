category: IT Services
commonfields: {id: Google Resource Manager, version: -1}
configuration:
- defaultvalue: ''
  display: Service Account Authentication File Contents
  name: auth_json
  options: []
  required: true
  type: 4
description: Google Cloud Platform Resource Manager
detaileddescription: Use these detailed instructions in order to retrieve the API
  key
display: Google Resource Manager
name: Google Resource Manager
script:
  commands:
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: projectId
      predefined: ['']
      required: true
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: parent.id
      predefined: []
      required: true
    - default: false
      defaultValue: ''
      description: ''
      isArray: true
      name: labels.attrs
      predefined: []
      required: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: name
      predefined: []
      required: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: parent.type
      predefined: []
      required: true
    - default: false
      defaultValue: ''
      description: ''
      isArray: true
      name: labels.values
      predefined: []
      required: false
    description: Create Project Resource
    execution: false
    name: grm-create-project
    outputs:
    - {contextPath: GRM.Project.Name, description: name of the project, type: String}
    - {contextPath: GRM.Project.ID, description: projectId, type: String}
    - {contextPath: GRM.Project.Number, description: projectNumber, type: String}
    - {contextPath: GRM.Project.State, description: lifecycleState, type: String}
    - {contextPath: GRM.Project.CreateTime, description: createTime - The time the
        resource was created, type: Date}
    - {contextPath: GRM.Project.Labels, description: Labels of the project, type: Unknown}
    - {contextPath: GRM.Project.Parent, description: '''id'' and ''type'' of the parent',
      type: Unknown}
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: projectId
      predefined: []
      required: true
    description: Get Project Resource
    execution: false
    name: grm-get-project
    outputs:
    - {contextPath: GRM.Project.Number, description: projectNumber, type: String}
    - {contextPath: GRM.Project.ID, description: projectId, type: String}
    - {contextPath: GRM.Project.State, description: lifecycleState, type: String}
    - {contextPath: GRM.Project.Name, description: name, type: String}
    - {contextPath: GRM.Project.CreateTime, description: createTime - The time the
        resource was created, type: Date}
    - {contextPath: GRM.Project.Labels, description: Labels of the project, type: Unknown}
    - {contextPath: GRM.Project.Parent, description: '''id'' and ''type'' of the parent',
      type: Unknown}
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: filter
      predefined: []
      required: false
    description: Lists projects that are visible to the user and satisfy  the specified
      filter. This method returns the projects in an unspecified order.
    execution: false
    name: grm-list-projects
    outputs:
    - {contextPath: GRM.Project.Name, description: name, type: String}
    - {contextPath: GRM.Project.ID, description: projectId, type: String}
    - {contextPath: GRM.Project.Number, description: projectNumber, type: String}
    - {contextPath: GRM.Project.State, description: lifecycleState, type: String}
    - {contextPath: GRM.Project.CreateTime, description: createTime - The time the
        resource was created, type: Date}
    - {contextPath: GRM.Project.Labels, description: Labels of the project, type: Unknown}
    - {contextPath: GRM.Project.Parent, description: '''id'' and ''type'' of the parent',
      type: Unknown}
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: projectId
      predefined: []
      required: true
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: name
      predefined: []
      required: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: parent.id
      predefined: []
      required: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: parent.type
      predefined: [organization, ' folder']
      required: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: true
      name: labels.attrs
      predefined: []
      required: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: true
      name: labels.values
      predefined: []
      required: false
    description: Updates the attributes of the Project identified by the specified
      projectId
    execution: false
    name: grm-update-project
    outputs:
    - {contextPath: GRM.Project.Name, description: name of the project, type: String}
    - {contextPath: GRM.Project.ID, description: projectId, type: String}
    - {contextPath: GRM.Project.Number, description: projectNumber, type: String}
    - {contextPath: GRM.Project.State, description: lifecycleState, type: String}
    - {contextPath: GRM.Project.CreateTime, description: createTime - The time the
        resource was created, type: Date}
    - {contextPath: GRM.Project.Labels, description: Labels of the project, type: Unknown}
    - {contextPath: GRM.Project.Parent, description: '''id'' and ''type'' of the parent',
      type: Unknown}
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: pageSize
      predefined: []
      required: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: pageToken
      predefined: []
      required: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: filter
      predefined: []
      required: false
    description: Searches Organization resources that are visible to the user and
      satisfy the specified filter. This method returns Organizations in an unspecified
      order. New Organizations do not necessarily appear at the end of the results.
    execution: false
    name: grm-search-organizations
    outputs:
    - {contextPath: GRM.Organization.Name, description: name of the organization in
        format <type/number> e.g. 'organizations/1245345444', type: String}
    - {contextPath: GRM.Organization.DisplayName, description: displayName, type: String}
    - {contextPath: GRM.Organization.State, description: lifecycleState, type: String}
    - {contextPath: GRM.Organization.CreateTime, description: creationTime - the time
        the organization resource was created, type: Date}
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: name
      predefined: []
      required: true
    description: Fetches an Organization resource identified by the specified resource
      name.
    execution: false
    name: grm-get-organization
    outputs:
    - {contextPath: GRM.Organization.Name, description: name of the organization in
        format <type/number> e.g. 'organizations/1245345444', type: String}
    - {contextPath: GRM.Organization.DisplayName, description: displayName, type: String}
    - {contextPath: GRM.Organization.State, description: lifecycleState, type: String}
    - {contextPath: GRM.Organization.CreateTime, description: creationTime - the time
        the organization resource was created, type: Date}
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: projectId
      predefined: []
      required: true
    description: Marks the Project identified by the specified project_id (for example,
      my-project-123) for deletion.
    execution: true
    name: grm-delete-project
    outputs:
    - {contextPath: GRM.Project.State, description: lifecycleState, type: String}
    - {contextPath: GRM.Project.Number, description: projectNumber, type: String}
    - {contextPath: GRM.Project.ID, description: projectId, type: String}
    - {contextPath: GRM.Project.Name, description: name, type: String}
    - {contextPath: GRM.Project.CreateTime, description: createTime - The time the
        resource was created, type: Date}
    - {contextPath: GRM.Project.Labels, description: Labels of the project, type: Unknown}
    - {contextPath: GRM.Project.Parent, description: '''id'' and ''type'' of the parent',
      type: Unknown}
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: projectId
      predefined: []
      required: true
    description: Restores the Project identified by the specified project_id (for
      example, my-project-123).
    execution: false
    name: grm-undelete-project
    outputs:
    - {contextPath: GRM.Project.State, description: lifecycleState, type: String}
    - {contextPath: GRM.Project.Number, description: projectNumber, type: String}
    - {contextPath: GRM.Project.ID, description: projectId, type: String}
    - {contextPath: GRM.Project.Name, description: name, type: String}
    - {contextPath: GRM.Project.CreateTime, description: createTime - The time the
        resource was created, type: Date}
    - {contextPath: GRM.Project.Labels, description: Labels of the project, type: Unknown}
    - {contextPath: GRM.Project.Parent, description: '''id'' and ''type'' of the parent',
      type: Unknown}
  dockerimage: grm-integration
  isfetch: false
  runonce: false
  script: |-
    ''' IMPORTS '''

    from googleapiclient import discovery
    import googleapiclient
    from google.oauth2 import service_account
    import json
    import time

    ''' GLOBALS/PARAMS '''

    API_VERSION = 'v1'
    SERVICE_ACT_CRDNTLS_FILE_CONTENTS = demisto.params()['auth_json'].encode('utf-8')
    GRM = 'cloudresourcemanager'
    SCOPE = ["https://www.googleapis.com/auth/cloud-platform"]


    ''' HELPER FUNCTIONS '''


    def build_and_authorize():
        """Return a service object via which can call GRM API.

        Use the service_account credential file generated in the Google Cloud Platform to build the Google
        Resource Manager API Service object via which commands in the integration will make API calls.
        """
        service_account_info = json.loads(SERVICE_ACT_CRDNTLS_FILE_CONTENTS.decode('utf-8'))
        service_credentials = service_account.Credentials.from_service_account_info(service_account_info, scopes=SCOPE)
        service = discovery.build(GRM, API_VERSION, credentials=service_credentials)
        return service


    def make_project_body(project_body):
        """Create and return the project body argument used when calling the GRM API to create or update a project."""
        keys = project_body.keys()
        body = {}
        if 'projectId' in keys:
            body['projectId'] = project_body['projectId']
        if 'parent.type' in keys and 'parent.id' in keys:
            body['parent'] = {
                'type': project_body['parent.type'],
                'id': project_body['parent.id']
            }
        if 'name' in keys:
            body['name'] = project_body['name']
        if 'labels.attrs' in keys and 'labels.values' in keys:
            labels_attrs = argToList(project_body['labels.attrs'])
            labels_values = argToList(project_body['labels.values'])
            if len(labels_attrs) != len(labels_values):
                err_msg = 'Label attrs array and Label values array do not match in length.\n'
                err_msg += 'These arrays need to match in length because each string in labels.attrs'
                err_msg += ' is assigned the value of the string in the corresponding index in the labels.values array.'
                raise IndexError(err_msg)
            else:
                body['labels'] = {}
                for lbl_tag, lbl_val in zip(labels_attrs, labels_values):
                    body['labels'][lbl_tag] = lbl_val
        return body


    def poll_operation(operation):
        """Query status of long running operation and return results if completed"""
        name = operation.get('name')
        while not operation.get('done'):
            # delay 1 second and then retry and see if the operation finished
            time.sleep(1)
            service = build_and_authorize()
            # get the latest state of the long-running operation
            operation = service.operations().get(name=name).execute()
        if not operation.get('error'):
            return operation.get('response')
        else:
            e = operation.get('error')
            err_code = e.get('code')
            err_msg = e.get('message')
            err_details = "".join(e.get('details'))
            full_err_msg = "error code: {}\nerror message: {}\nerror details: {}".format(err_code, err_msg, err_details)
            raise Exception(full_err_msg)


    ''' MAIN FUNCTIONS '''


    def test_module():
        """If the list_projects_command executes successfully then the test completed and returns 'ok'"""
        commands['grm-list-projects']()
        demisto.results('ok')


    def create_project(project_body):
        """Build service object and return the result of calling the API 'create' function for the projects resource."""
        service = build_and_authorize()
        body = make_project_body(project_body)
        operation = service.projects().create(body=body).execute()
        # Get back result of long-running operation
        response = poll_operation(operation)
        return response


    def create_project_command():
        """Create a project in the Google Cloud Platform."""
        args = demisto.args()
        response = create_project(args)
        # Parse response into context
        context = {
            'Name': response.get('name'),
            'ID': response.get('projectId'),
            'Number': response.get('projectNumber'),
            'State': response.get('lifecycleState'),
            'CreateTime': response.get('createTime'),
            'Parent': response.get('parent'),
            'Labels': response.get('labels')
        }
        md = tableToMarkdown('Google Cloud Project Created', context)
        demisto.results({
            'Type': entryTypes['note'],
            'Contents': response,
            'ContentsFormat': formats['json'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': md,
            'EntryContext': {
                'GRM.Project(val.ID && val.ID === obj.ID)': context
            }
        })


    def delete_project(project_id):
        """Build service object and return the result of calling the API 'delete' function for the projects resource."""
        service = build_and_authorize()
        operation = service.projects().delete(projectId=project_id).execute()
        return operation


    def delete_project_command():
        """Set the lifcycleState attribute of a specified project to DELETE_REQUESTED."""
        project_id = demisto.args()['projectId']
        response = delete_project(project_id)
        if json.dumps(response) == '{}':
            response = get_project(project_id)
            # Parse response into context
            context = {
                'Name': response.get('name'),
                'ID': response.get('projectId'),
                'Number': response.get('projectNumber'),
                'State': response.get('lifecycleState'),
                'CreateTime': response.get('createTime'),
                'Parent': response.get('parent'),
                'Labels': response.get('labels')
            }
            success_msg = 'The lifecycleState attribute of Project {} has been set to DELETE_REQUESTED'.format(project_id)
            demisto.results({
                'Type': entryTypes['note'],
                'Contents': success_msg,
                'ContentsFormat': formats['text'],
                'EntryContext': {
                    'GRM.Project(val.ID && val.ID === obj.ID)': context
                }
            })
        else:
            demisto.results('Unexpected return object from {} execution. Results uncertain.'.format(demisto.command()))


    def undelete_project(project_id):
        """Build service object and return the result of calling the API 'undelete' function for the projects resource."""
        service = build_and_authorize()
        operation = service.projects().undelete(projectId=project_id).execute()
        return operation


    def undelete_project_command():
        """Set the lifcycleState attribute of a specified project back to ACTIVE."""
        project_id = demisto.args()['projectId']
        response = undelete_project(project_id)
        if json.dumps(response) == '{}':
            response = get_project(project_id)
            # Parse response into context
            context = {
                'Name': response.get('name'),
                'ID': response.get('projectId'),
                'Number': response.get('projectNumber'),
                'State': response.get('lifecycleState'),
                'CreateTime': response.get('createTime'),
                'Parent': response.get('parent'),
                'Labels': response.get('labels')
            }
            success_msg = 'The lifecycleState attribute of Project {} has been set to ACTIVE'.format(project_id)
            demisto.results({
                'Type': entryTypes['note'],
                'Contents': success_msg,
                'ContentsFormat': formats['text'],
                'EntryContext': {
                    'GRM.Project(val.ID && val.ID === obj.ID)': context
                }
            })
        else:
            demisto.results('Unexpected return object from {} execution. Results uncertain.'.format(demisto.command()))


    def get_project(project_id):
        """Build service object and return the result of calling the API 'get' function for the projects resource."""
        service = build_and_authorize()
        operation = service.projects().get(projectId=project_id).execute()
        return operation


    def get_project_command():
        """Retrieves the Project identified by the specified projectId."""
        project_id = demisto.args()['projectId']
        response = get_project(project_id)
        # Parse response into context
        context = {
            'Name': response.get('name'),
            'ID': response.get('projectId'),
            'Number': response.get('projectNumber'),
            'State': response.get('lifecycleState'),
            'CreateTime': response.get('createTime'),
            'Parent': response.get('parent'),
            'Labels': response.get('labels')
        }
        md = tableToMarkdown('Details of Google Cloud Project', context)
        demisto.results({
            'Type': entryTypes['note'],
            'Contents': response,
            'ContentsFormat': formats['json'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': md,
            'EntryContext': {
                'GRM.Project(val.ID && val.ID == obj.ID)': context
            }
        })


    def list_projects(filter_list):
        """Build service object and return the result of calling the API 'list' function for the projects resource."""
        service = build_and_authorize()
        operation = service.projects().list(filter=filter_list).execute()
        return operation


    def list_projects_command():
        """Lists Projects that are visible to the user and satisfy the specified filter if one is provided."""
        filter_list = demisto.args()['filter'] if 'filter' in demisto.args() else None
        response = list_projects(filter_list)
        contexts = []
        for project in response.get('projects', []):
            # Parse project into context
            context = {
                'Name': project.get('name'),
                'ID': project.get('projectId'),
                'Number': project.get('projectNumber'),
                'State': project.get('lifecycleState'),
                'CreateTime': project.get('createTime'),
                'Parent': project.get('parent'),
                'Labels': project.get('labels')
            }
            contexts.append(context)
        md = tableToMarkdown("Projects", contexts)
        entry = {
            'Type': entryTypes['note'],
            'Contents': response,
            'ContentsFormat': formats['json'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': md,
            'EntryContext': {
                'GRM.Project(val.ID && val.ID === obj.ID)': contexts
            }
        }
        demisto.results(entry)


    def update_project(project_id, project_body):
        """Build service object and return the result of calling the API 'update' function for the projects resource."""
        service = build_and_authorize()
        operation = service.projects().update(projectId=project_id, body=project_body)
        return operation


    # Does not work How I would think it would ---- NEEDS ATTENTION
    def update_project_command():
        """Updates the attributes of the Project identified by the specified projectId."""
        project_id = demisto.args()['projectId']
        project_body = demisto.args()
        # del project_body['projectId']
        project_body = make_project_body(project_body)
        response = update_project(project_id, project_body)
        response = get_project(project_id)
        # Parse response into context
        context = {
            'Name': response.get('name'),
            'ID': response.get('projectId'),
            'Number': response.get('projectNumber'),
            'State': response.get('lifecycleState'),
            'CreateTime': response.get('createTime'),
            'Parent': response.get('parent'),
            'Labels': response.get('labels')
        }
        md = tableToMarkdown('Details of Updated Google Cloud Project', context)
        demisto.results({
            'Type': entryTypes['note'],
            'Contents': response,
            'ContentsFormat': formats['json'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': md,
            'EntryContext': {
                'GRM.Project(val.ID && val.ID === obj.ID)': context
            }
        })


    def search_organizations(req_body):
        """
        Build service object and return the result of calling the API 'search' function for the organizations resource.
        """
        service = build_and_authorize()
        operation = service.organizations().search(body=req_body).execute()
        return operation


    def search_organizations_command():
        """Searches Organization resources that are visible to the user and satisfy the specified filter (if provided)."""
        req_body = demisto.args()
        contexts = []
        next_page = True
        while next_page:
            response = search_organizations(req_body)
            for organization in response.get('organizations', []):
                # Parse organization into context
                context = {
                    'Name': organization.get('name'),
                    'DisplayName': organization.get('displayName'),
                    'State': organization.get('lifecycleState'),
                    'CreateTime': organization.get('creationTime')
                }
                contexts.append(context)
            if 'nextPageToken' not in response:
                next_page = False
            else:
                req_body['pageToken'] = response['nextPageToken']
        md = tableToMarkdown("Organizations", contexts)
        entry = {
            'Type': entryTypes['note'],
            'Contents': response,
            'ContentsFormat': formats['json'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': md,
            'EntryContext': {
                'GRM.Organization(val.Name && val.Name === obj.Name)': contexts
            }
        }
        demisto.results(entry)


    def get_organization(name):
        """Build service object and return the result of calling the API 'get' function for the organizations resource."""
        service = build_and_authorize()
        operation = service.organizations().get(name=name).execute()
        return operation


    def get_organization_command():
        """Fetches an Organization resource identified by the specified resource name."""
        name = demisto.args()['name']
        response = get_organization(name)
        # Parse response into context
        context = {
            'Name': response.get('name'),
            'DisplayName': response.get('displayName'),
            'State': response.get('lifecycleState'),
            'CreateTime': response.get('creationTime')
        }
        md = tableToMarkdown("Details of Fetched Organization", context)
        demisto.results({
            'Type': entryTypes['note'],
            'Contents': response,
            'ContentsFormat': formats['json'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': md,
            'EntryContext': {
                'GRM.Organization(val.Name && val.Name === obj.Name)': context
            }
        })


    def create_folder(parent, name):
        """Build service object and return the result of calling the API 'create' function for the folders resource."""
        API_VERSION = 'v2'
        service = build_and_authorize()
        API_VERSION = 'v1'
        req_body = {'name': name}
        operation = service.folders().create(parent=parent, body=req_body)
        return operation


    def create_folder_command():
        """Creates a Folder in the resource hierarchy."""
        parent = demisto.args()['parent']
        name = demisto.args()['name']
        response = create_folder(parent, name)
        md = tableToMarkdown("Folder Creation Operation", response)
        demisto.results({
            'Type': entryTypes['note'],
            'Contents': response,
            'ContentsFormat': formats['json'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': md,
            'EntryContext': {
                'GRM.Operation(val.Name && val.Name === obj.Name)': response
            }
        })


    ''' COMMANDS MANAGER / SWITCH PANEL '''

    # Command Switch Panel
    commands = {
        "grm-create-project": create_project_command,
        "grm-delete-project": delete_project_command,
        "grm-get-project": get_project_command,
        "grm-list-projects": list_projects_command,
        "grm-update-project": update_project_command,
        "grm-search-organizations": search_organizations_command,
        "grm-get-organization": get_organization_command,
        "grm-undelete-project": undelete_project_command,
        "grm-create-folder": create_folder_command,
    }

    LOG('Command being called is %s' % (demisto.command()))

    try:
        if demisto.command() == 'test-module':
            # This is the call made when pressing the integration test button.
            test_module()
        elif demisto.command() in commands.keys():
            commands[demisto.command()]()

    # Log exceptions
    except Exception as e:
        # Output HttpError errors from googleapiclient to the warroom nicely
        if type(e) is googleapiclient.errors.HttpError:
            if e.resp.get('content-type').startswith('application/json'):
                err_json = json.loads((e.content).decode('utf-8'))
                error_code = (err_json.get('error').get('code'))
                error_msg = (err_json.get('error').get('message'))
                error_reason = (err_json.get('error').get('errors')[0].get('reason'))
                error_status = (err_json.get('error').get('status'))
                full_err_msg = "error code: {}\n{}\nreason: {}\nstatus: {}".format(error_code, error_msg,
                                                                                   error_reason, error_status)
                LOG(full_err_msg)
                LOG.print_log()
                return_error(full_err_msg)
        # If there is an Exception message return it to the warroom
        elif hasattr(e, 'message'):
            LOG(e.message)
            LOG.print_log()
            return_error(e.message)
        # Otherwise output the exception itself to the warroom
        else:
            LOG(str(e))
            LOG.print_log()
            return_error(str(e))
  type: python
releaseNotes: New integration
tests: [GoogleResourceManager-Test]
