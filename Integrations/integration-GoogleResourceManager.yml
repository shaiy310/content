category: IT Services
commonfields: {id: Google Resource Manager, version: -1}
configuration:
- defaultvalue: ''
  display: Authentication file contents
  name: auth_json
  options: []
  required: true
  type: 4
- defaultvalue: ''
  display: Username
  name: gsuite_credentials
  options: []
  required: false
  type: 9
description: Google Cloud Platform Resource Manager
detaileddescription: Use these detailed instructions in order to retrieve the API
  key
display: Google Resource Manager
name: Google Resource Manager
script:
  commands:
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: projectId
      predefined: ['']
      required: true
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: parent.id
      predefined: []
      required: true
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: true
      name: labels.attrs
      predefined: []
      required: false
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: name
      predefined: []
      required: false
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: parent.type
      predefined: []
      required: true
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: true
      name: labels.values
      predefined: []
      required: false
      secret: false
    description: Create Project Resource
    execution: false
    name: grm-create-project
    outputs:
    - {contextPath: GRM.Operation.Name, description: Operation Name, type: String}
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: projectId
      predefined: []
      required: true
      secret: false
    description: Get Project Resource
    execution: false
    name: grm-get-project
    outputs:
    - {contextPath: GRM.Project.Number, description: projectNumber, type: String}
    - {contextPath: GRM.Project.ID, description: projectId, type: String}
    - {contextPath: GRM.Project.State, description: lifecycleState, type: String}
    - {contextPath: GRM.Project.Name, description: name, type: String}
    - {contextPath: GRM.Project.CreateTime, description: createTime - The time the
        resource was created, type: Date}
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: filter
      predefined: []
      required: false
      secret: false
    description: Lists projects that are visible to the user and satisfy  the specified
      filter. This method returns the projects in an unspecified order.
    execution: false
    name: grm-list-projects
    outputs: []
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: projectId
      predefined: []
      required: true
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: name
      predefined: []
      required: false
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: parent.id
      predefined: []
      required: false
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: parent.type
      predefined: [organization, ' folder']
      required: false
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: true
      name: labels.attrs
      predefined: []
      required: false
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: true
      name: labels.values
      predefined: []
      required: false
      secret: false
    description: Updates the attributes of the Project identified by the specified
      projectId
    execution: false
    name: grm-update-project
    outputs:
    - {contextPath: GRM.Project.Name, description: name of the project, type: String}
    - {contextPath: GRM.Project.ID, description: projectId, type: String}
    - {contextPath: GRM.Project.Number, description: projectNumber, type: String}
    - {contextPath: GRM.Project.State, description: lifecycleState, type: String}
    - {contextPath: GRM.Project.CreateTime, description: createTime - The time the
        resource was created, type: Date}
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: pageSize
      predefined: []
      required: false
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: pageToken
      predefined: []
      required: false
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: filter
      predefined: []
      required: false
      secret: false
    description: Searches Organization resources that are visible to the user and
      satisfy the specified filter. This method returns Organizations in an unspecified
      order. New Organizations do not necessarily appear at the end of the results.
    execution: false
    name: grm-search-organizations
    outputs:
    - contextPath: GRM.Response.Organization
      description: |-
        object(Organization)

        Organization that matched the search query
      type: Unknown
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: name
      predefined: []
      required: true
      secret: false
    description: Fetches an Organization resource identified by the specified resource
      name.
    execution: false
    name: grm-get-organization
    outputs:
    - contextPath: GRM.Response.Organization
      description: |-
        object(Organization)

        Organization that matched the name argument
      type: Unknown
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: projectId
      predefined: []
      required: true
      secret: false
    description: Marks the Project identified by the specified project_id (for example,
      my-project-123) for deletion.
    execution: true
    name: grm-delete-project
    outputs: []
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: projectId
      predefined: []
      required: true
      secret: false
    description: Restores the Project identified by the specified project_id (for
      example, my-project-123).
    execution: false
    name: grm-undelete-project
    outputs: []
  - arguments:
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: parent
      predefined: []
      required: true
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: name
      predefined: []
      required: true
      secret: false
    - default: false
      defaultValue: ''
      description: ''
      isArray: false
      name: displayName
      predefined: []
      required: false
      secret: false
    description: |-
      Creates a Folder in the resource hierarchy. Returns an Operation which can be used to track the progress of the folder creation workflow. Upon success the Operation.response field will be populated with the created Folder.

      In order to succeed, the addition of this new Folder must not violate the Folder naming, height or fanout constraints.

      The Folder's displayName must be distinct from all other Folder's that share its parent.
      The addition of the Folder must not cause the active Folder hierarchy to exceed a height of 4. Note, the full active + deleted Folder hierarchy is allowed to reach a height of 8; this provides additional headroom when moving folders that contain deleted folders.
      The addition of the Folder must not cause the total number of Folders under its parent to exceed 100.
      If the operation fails due to a folder constraint violation, some errors may be returned by the folders.create request, with status code FAILED_PRECONDITION and an error description. Other folder constraint violations will be communicated in the Operation, with the specific PreconditionFailure returned via the details list in the Operation.error field.
    execution: false
    name: grm-create-folder
    outputs: []
  dockerimage: grm-integration
  isfetch: false
  runonce: false
  script: |-
    ''' IMPORTS '''

    from googleapiclient import discovery
    import googleapiclient
    from google.oauth2 import service_account
    import json

    ''' GLOBALS/PARAMS '''

    API_VERSION = 'v1'
    ADMIN_EMAIL = demisto.params()['gsuite_credentials']['identifier'].encode('utf-8')
    SERVICE_ACT_CRDNTLS_FILE_CONTENTS = demisto.params()['auth_json'].encode('utf-8')
    GRM = 'cloudresourcemanager'
    SCOPE = ["https://www.googleapis.com/auth/cloud-platform"]


    ''' HELPER FUNCTIONS '''


    def build_and_authorize():
        """Return a service object via which can call GRM API.

        Use the service_account credential file generated in the Google Cloud Platform to build the Google
        Resource Manager API Service object via which commands in the integration will make API calls.
        """
        service_account_info = json.loads(SERVICE_ACT_CRDNTLS_FILE_CONTENTS.decode('utf-8'))
        service_credentials = service_account.Credentials.from_service_account_info(service_account_info, scopes=SCOPE)
        service = discovery.build(GRM, API_VERSION, credentials=service_credentials)
        return service


    def make_project_body(project_body):
        """Create and return the project body argument used when calling the GRM API to create or update a project."""
        keys = project_body.keys()
        body = {}
        if 'projectId' in keys:
            body['projectId'] = project_body['projectId']
        if 'parent.type' in keys and 'parent.id' in keys:
            body['parent'] = {
                'type': project_body['parent.type'],
                'id': project_body['parent.id']
            }
        if 'name' in keys:
            body['name'] = project_body['name']
        if 'labels.attrs' in keys and 'labels.values' in keys:
            labels_attrs = argToList(project_body['labels.attrs'])
            labels_values = argToList(project_body['labels.values'])
            if len(labels_attrs) != len(labels_values):
                err_msg = 'Label attrs array and Label values array do not match in length.\n'
                err_msg += 'These arrays need to match in length because each string in labels.attrs'
                err_msg += ' is assigned the value of the string in the corresponding index in the labels.values array.'
                raise IndexError(err_msg)
            else:
                body['labels'] = {}
                for lbl_tag, lbl_val in zip(labels_attrs, labels_values):
                    body['labels'][lbl_tag] = lbl_val
        return body


    ''' MAIN FUNCTIONS '''


    def test_module():
        commands['grm-list-projects']()
        demisto.results('ok')
        sys.exit(0)


    def create_project(project_body):
        service = build_and_authorize()
        body = make_project_body(project_body)
        operation = service.projects().create(body=body).execute()
        return operation


    def create_project_command():
        """Create a project in the Google Cloud Platform."""
        args = demisto.args()
        response = create_project(args)
        md = tableToMarkdown('Google Cloud Project Created', response)
        demisto.results({
            'Type': entryTypes['note'],
            'Contents': response,
            'ContentsFormat': formats['json'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': md,
            'EntryContext': {
                'GRM.Operation(val.Name&&val.Name==obj.Name)': response
            }
        })


    def delete_project(project_id):
        service = build_and_authorize()
        operation = service.projects().delete(projectId=project_id).execute()
        return operation


    def delete_project_command():
        """Set the lifcycleState attribute of a specified project to DELETE_REQUESTED."""
        project_id = demisto.args()['projectId']
        response = delete_project(project_id)
        if json.dumps(response) == '{}':
            success_msg = 'The lifecycleState attribute of Project {} has been set to DELETE_REQUESTED'.format(project_id)
            demisto.results(success_msg)
        else:
            demisto.results('Unexpected return object from command execution. Results uncertain.')


    def undelete_project(project_id):
        service = build_and_authorize()
        operation = service.projects().undelete(projectId=project_id).execute()
        return operation


    def undelete_project_command():
        """Set the lifcycleState attribute of a specified project back to ACTIVE."""
        project_id = demisto.args()['projectId']
        response = undelete_project(project_id)
        demisto.results('ok')


    def get_project(project_id):
        service = build_and_authorize()
        operation = service.projects().get(projectId=project_id).execute()
        return operation


    def get_project_command():
        """Retrieves the Project identified by the specified projectId."""
        project_id = demisto.args()['projectId']
        response = get_project(project_id)
        md = tableToMarkdown('Details of Google Cloud Project', response)
        demisto.results({
            'Type': entryTypes['note'],
            'Contents': response,
            'ContentsFormat': formats['json'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': md,
            'EntryContext': {
                'GRM.Project(val.ID&&val.ID==obj.ID)': response
            }
        })


    def list_projects(filter_list):
        service = build_and_authorize()
        operation = service.projects().list(filter=filter_list).execute()
        return operation


    def list_projects_command():
        """Lists Projects that are visible to the user and satisfy the specified filter if one is provided."""
        filter_list = demisto.args()['filter'] if 'filter' in demisto.args() else None
        response = list_projects(filter_list)
        results = []
        for project in response.get('projects', []):
            md = tableToMarkdown("Project", project)
            entry = {
                'Type': entryTypes['note'],
                'Contents': project,
                'ContentsFormat': formats['json'],
                'ReadableContentsFormat': formats['markdown'],
                'HumanReadable': md,
                'EntryContext': {
                    'GRM.Project(val.ID&&val.ID==obj.ID)': project
                }
            }
            results.append(entry)
        demisto.results(results)


    def update_project(project_id, project_body):
        service = build_and_authorize()
        operation = service.projects().update(projectId=project_id, body=project_body)
        return operation


    def update_project_command():
        """Updates the attributes of the Project identified by the specified projectId."""
        project_id = demisto.args()['projectId']
        project_body = demisto.args()
        del project_body['projectId']
        project_body = make_project_body(project_body)
        response = update_project(project_id, project_body)
        demisto.results('ok')


    def search_organizations(req_body):
        service = build_and_authorize()
        operation = service.organizations().search(body=req_body).execute()
        return operation


    def search_organizations_command():
        """Searches Organization resources that are visible to the user and satisfy the specified filter (if provided)."""
        req_body = demisto.args()
        results = []
        next_page = True
        while next_page:
            response = search_organizations(req_body)
            for organization in response.get('organizations', []):
                md = tableToMarkdown("Organization", organization)
                entry = {
                    'Type': entryTypes['note'],
                    'Contents': organization,
                    'ContentsFormat': formats['json'],
                    'ReadableContentsFormat': formats['markdown'],
                    'HumanReadable': md,
                    'EntryContext': {
                        'GRM.Organization(val.Name&&val.Name==obj.Name)': organization
                    }
                }
                results.append(entry)
            if 'nextPageToken' not in response:
                next_page = False
            else:
                req_body['pageToken'] = response['nextPageToken']
        demisto.results(results)


    def get_organization(name):
        service = build_and_authorize()
        operation = service.organizations().get(name=name).execute()
        return operation


    def get_organization_command():
        """Fetches an Organization resource identified by the specified resource name."""
        name = demisto.args()['name']
        response = get_organization(name)
        md = tableToMarkdown("Details of Fetched Organization", response)
        demisto.results({
            'Type': entryTypes['note'],
            'Contents': response,
            'ContentsFormat': formats['json'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': md,
            'EntryContext': {
                'GRM.Organization(val.Name&&val.Name==obj.Name)': response
            }
        })


    def create_folder(parent, name):
        API_VERSION = 'v2'
        service = build_and_authorize()
        API_VERSION = 'v1'
        req_body = {'name': name}
        operation = service.folders().create(parent=parent, body=req_body)
        return operation


    def create_folder_command():
        """Creates a Folder in the resource hierarchy."""
        parent = demisto.args()['parent']
        name = demisto.args()['name']
        response = create_folder(parent, name)
        md = tableToMarkdown("Folder Creation Operation", response)
        demisto.results({
            'Type': entryTypes['note'],
            'Contents': response,
            'ContentsFormat': formats['json'],
            'ReadableContentsFormat': formats['markdown'],
            'HumanReadable': md,
            'EntryContext': {
                'GRM.Operation(val.Name&&val.Name==obj.Name)': response
            }
        })


    ''' COMMANDS MANAGER / SWITCH PANEL '''

    # Command Switch Panel
    commands = {
        "grm-create-project": create_project_command,
        "grm-delete-project": delete_project_command,
        "grm-get-project": get_project_command,
        "grm-list-projects": list_projects_command,
        "grm-update-project": update_project_command,
        "grm-search-organizations": search_organizations_command,
        "grm-get-organization": get_organization_command,
        "grm-undelete-project": undelete_project_command,
        "grm-create-folder": create_folder_command,
    }

    LOG('Command being called is %s' % (demisto.command()))

    try:
        if demisto.command() == 'test-module':
            # This is the call made when pressing the integration test button.
            test_module()
        elif demisto.command() in commands.keys():
            commands[demisto.command()]()

    # Log exceptions
    except Exception as e:
        # Output HttpError errors from googleapiclient to the warroom nicely
        if type(e) is googleapiclient.errors.HttpError:
            if e.resp.get('content-type').startswith('application/json'):
                err_json = json.loads((e.content).decode('utf-8'))
                error_code = (err_json.get('error').get('code'))
                error_msg = (err_json.get('error').get('message'))
                error_reason = (err_json.get('error').get('errors')[0].get('reason'))
                error_status = (err_json.get('error').get('status'))
                full_err_msg = "error code: {}\n{}\nreason: {}\nstatus: {}".format(error_code, error_msg,
                                                                                   error_reason, error_status)
                LOG(full_err_msg)
                LOG.print_log()
                return_error(full_err_msg)
        # If there is an Exception message return it to the warroom
        elif hasattr(e, 'message'):
            LOG(e.message)
            LOG.print_log()
            return_error(e.message)
        # Otherwise output the exception itself to the warroom
        else:
            LOG(str(e))
            LOG.print_log()
            return_error(str(e))
  type: python
