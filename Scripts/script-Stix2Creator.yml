commonfields:
  id: Stix2Creator
  version: -1
name: Stix2Creator
script: |-
  ''' IMPORTS '''
  import datetime
  import time
  import requests
  import json

  from stix2 import Indicator, Bundle

  demisto_indicator_type = demisto.args().get('indicator_type','Unkown')
  value = demisto.args().get('value','')
  source_System = demisto.args().get('source','')
  demisto_Score = demisto.args().get('score','')
  first_seen = demisto.args().get('firstSeen','1970-01-01T00:00:00+00:00')
  demisto_created = demisto.args().get('timestamp','1970-01-01T00:00:00+00:00')
  last_seen = demisto.args().get('lastSeen','1970-01-01T00:00:00+00:00')
  createBundle = demisto.args().get('createBundle','False')

  stix_type_and_value = ""

  if demisto_indicator_type.lower() == "File MD5".lower():
      stix_type_and_value = "[file:hashes.md5 = '" + value + "']"
  elif demisto_indicator_type.lower() == "File SHA-1".lower():
      stix_type_and_value = "[file:hashes.sha-1 = '" + value + "']"
  elif demisto_indicator_type.lower() == "File SHA-256".lower():
      stix_type_and_value = "[file:hashes.sha-256 = '" + value + "']"
  elif demisto_indicator_type.lower() == "IP".lower():
      stix_type_and_value = "[ipv4-addr:value = '" + value + "']"
  elif demisto_indicator_type.lower() == "URL".lower():
      stix_type_and_value = "[url:value = '" + value + "']"
  else:
      stix_type_and_value = "[{}:value = '{}']".format(demisto_indicator_type.lower(),value)
      # stix_type_and_value = "[" + demisto_indicator_type.lower() +":value = '" + value + "']"

  if demisto_Score.lower() == "bad":
      demisto_Score = "High"
  elif demisto_Score.lower() == "suspicious":
      demisto_Score = "Medium"
  else:
      demisto_Score = ""

  indicator = Indicator(labels=["unkown"],
                        pattern=stix_type_and_value,
                        source=source_System,
                        created=demisto_created,
                        modified=last_seen,
                        firstSeen=first_seen,
                        score=demisto_Score,
                        allow_custom=True)

  # def get_dbot_score_report(should_create_bundle, indicator):
  if createBundle.lower() == "true":
      bundle = Bundle(indicator)
      # demisto.results( bundle)
      context = {
          'StixExportedIndicators': json.loads(str(bundle))
      }
      demisto.results({'Type': entryTypes['note'],
                       'Contents': str(bundle),
                       'EntryContext': context,
                       'ContentsFormat': formats['json']})
  else:

      context = {
          'StixExportedIndicators': json.loads(str(indicator))
      }

      demisto.results({'Type': entryTypes['note'],
                       'Contents': str(indicator),
                       'EntryContext': context,
                       'ContentsFormat': formats['json']})

  # get_dbot_score_report (createBundle,indicator)
type: python
tags: []
enabled: true
args:
- name: indicator_type
  description: Type of indicator
- name: value
  description: Indicator value
- name: source
  description: Indicator source system
- name: score
  description: DBot score
- name: firstSeen
  description: 'first time the indicator have been seen '
- name: timestamp
- name: lastSeen
- name: createBundle
  default: true
  defaultValue: "False"
outputs:
- contextPath: StixExportedIndicators.created
  type: string
- contextPath: StixExportedIndicators.firstSeen
  type: string
- contextPath: StixExportedIndicators.source
  type: string
- contextPath: StixExportedIndicators.type
  type: string
- contextPath: StixExportedIndicators.pattern
  type: string
scripttarget: 0
runonce: false
runas: DBotWeakRole
tests:
  - Script-TestStix2Creator