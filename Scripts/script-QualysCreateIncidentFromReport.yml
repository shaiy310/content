commonfields:
  id: QualysCreateIncidentFromReport
  version: -1
name: QualysCreateIncidentFromReport
script: |-
  import json
  incident_type = demisto.get(demisto.args(), 'incidentType')
  if not incident_type:
      incident_type = "Vulnerability"

  max_file_size = demisto.get(demisto.args(), 'maxFileSize')
  if max_file_size:
      max_file_size = int(max_file_size)
  else:
      max_file_size = 1024**2

  min_severity = demisto.get(demisto.args(), 'minSeverity') or 1
  min_severity = int(min_severity)

  res = demisto.executeCommand('getFilePath', {'id': demisto.args()['entryID']})
  with open(res[0]['Contents']['path'], 'r') as f:
      data = f.read(max_file_size).decode('unicode_escape').encode('utf-8')
  if data:
      report = json.loads(xml2json(data))

      generation_date = demisto.get(report, "ASSET_DATA_REPORT.HEADER.GENERATION_DATETIME")

      #Get asset list
      asset_list = demisto.get(report, "ASSET_DATA_REPORT.HOST_LIST.HOST")
      if not asset_list:
          demisto.results( { "Type" : entryTypes["note"], "ContentsFormat" : formats["text"], "Contents" : 'No vulnerable assets were found' } )
          sys.exit(0)
      if not isinstance(asset_list, list):
          asset_list = [asset_list]

      # Get QIDs only if over relevant severity
      general_vulnerabilities = argToList(demisto.get(report, "ASSET_DATA_REPORT.GLOSSARY.VULN_DETAILS_LIST.VULN_DETAILS"))
      if not isinstance(general_vulnerabilities, list):
          general_vulnerabilities = [general_vulnerabilities]

      qid_severity = [demisto.get(vulnerability,"QID.#text") for vulnerability in general_vulnerabilities if demisto.get(vulnerability,'SEVERITY') and (int(demisto.get(vulnerability,'SEVERITY')) >= min_severity)]

      for asset in asset_list:
          # Get Asset ID from Qualys
          ip = demisto.get(asset,"IP")
          if not ip:
              demisto.results( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'No IP was found for asset {0}'.format(str(asset)) } )
              sys.exit(0)

          resp = demisto.executeCommand("qualys-host-list", {"ips": ip})
          if isError(resp[0]):
              demisto.results(resp)
              sys.exit(0)

          asset_id = demisto.get(resp[0],'Contents.HOST_LIST_OUTPUT.RESPONSE.HOST_LIST.HOST.ID')
          if not asset_id:
              demisto.results( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'No ID was found for asset {0}'.format(str(asset)) } )
              sys.exit(0)

          # Get Asset vulnerability list
          vulnerabilities = argToList(demisto.get(asset, "VULN_INFO_LIST.VULN_INFO"))
          if not isinstance(vulnerabilities, list):
              vulnerabilities = [vulnerabilities]

          qids = map(lambda vulnerability : demisto.get(vulnerability,"QID.#text"), vulnerabilities)

          qids = list(set(qids) & set(qid_severity))

          for qid in qids:
              resp = demisto.executeCommand("getIncidents", {"query" : "vendorid: {0} and assetid: {1} and --status:Closed".format(qid,asset_id)})
              if isError(resp[0]):
                  demisto.results(resp)
                  sys.exit(0)

              incident_number = demisto.get(resp[0],"Contents.total")

              try:
                  incident_number = int(incident_number)
              except:
                  demisto.results( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'Error whild searching the incident repository' } )
                  sys.exit(0)

              if incident_number == 0:
                  #Create incident
                  demisto.executeCommand("createNewIncident", {"name": "Vulnerability - Asset {0} QID {1} - {2}".format(asset_id,qid,generation_date),
                                                              "vendorid" : str(qid),
                                                              "type": incident_type,
                                                              "assetid" : str(asset_id)
                                                              })

      demisto.results("Done.")
  else:
      demisto.results( { "Type" : entryTypes["error"], "ContentsFormat" : formats["text"], "Contents" : 'No data could be read.' } )()
type: python
tags:
- qualys
comment: |-
  Create incidents from a Qualys report (XML), based on the Qualys asset ID and vulnerability ID (QID).
  Duplicate incidents are not created for the same asset ID and QID.
system: true
args:
- name: entryID
  required: true
  description: War room entryID of the XML report.
- name: maxFileSize
  description: Maximum file size to load, in bytes. Default is 1024 KB.
- name: minSeverity
  auto: PREDEFINED
  predefined:
  - "1"
  - "2"
  - "3"
  - "4"
  - "5"
  description: The minimum Qualys severity to create incidents for.
- name: incidentType
  description: The incident type to create incidents for. Default is "Vulnerability".
scripttarget: 0
runonce: false
