commonfields:
  id: UnEscapeURLs
  version: -1
name: UnEscapeURLs
script: |-
  // Check if it is a Mimecast Protected URL
  var mimecast_re = /https:\/\/\w*-(api|eu|us|de|za|au)\.mimecast.com\/s\//;
  // If it is a Mimecast Protected URL
  if (mimecast_re.test(args.input)) {
      var mimecast_cmd = 'mimecast-url-decode';
      if (isCommandAvailable(mimecast_cmd)) {
          var cmd_response = executeCommand(mimecast_cmd, {'url': args.input});
          var decoded_url = cmd_response[0].Contents['Decoded URL'];
          return decoded_url;
      } else {
          // If no Mimecast instance, log error and return non-decoded URL
          var error_msg = 'Mimecast Protected URL could not be decoded because ';
          error_msg += 'no instance of the Mimecast integration was found to be running.';
          logInfo(error_msg);
          return args.input;
      }
  }
  // Check if it is a Microsoft ATP Safe Link
  var atp_link_re = /(https:\/\/\w*|\w*)\.safelinks\.protection\.outlook\.com\/\?url=/;
  if (atp_link_re.test(args.input)) {
      // Based off of http://www.o365atp.com/
      var link = args.input;
      var url_parts = link.split("?")[1];
      var params = url_parts.split("&");
      var target_url = "Error:  couldn't find target URL.";
      for (n = 0; n < params.length; n++) {
          namval = params[n].split("=");
          if (namval[0] == "url") target_url = namval[1];
      }
      if (target_url === "Error:  couldn't find target URL.") {
          error_msg = "Could not decode ATP Safe Link. Returning original URL.";
          logInfo(error_msg);
          return link;
      }
      decoded_url = decodeURIComponent(target_url);
      return decoded_url;
  }
  // Check if it is a Proofpoint Protected URL
  var PROOFPOINT_PREFIXES = ['https://urldefense.proofpoint.com/v1/url?u=', 'https://urldefense.proofpoint.com/v2/url?u='];
  var v = 0;
  if (args.input.indexOf(PROOFPOINT_PREFIXES[0]) === 0) {
      v = 1;
  } else if (args.input.indexOf(PROOFPOINT_PREFIXES[1]) === 0) {
      v = 2;
  }
  // Not Proofpoint so just un-escape
  if (v === 0) {
      var url = args.input.replace(/\[\.\]/g, '.').replace('hxxp', 'http').replace(/&amp;/g, '&');
      // Normalize the URL with http prefix
      if (url.indexOf('http') !== 0 && url.indexOf('ftp') !== 0) {
          return 'http://' + url;
      }
      return url;
  }
  // If from Proofpoint then no need to un-escape or normalize
  var re = /&.*$/;
  var reg = /%\d{2}/g;
  var clean = args.input.substr(PROOFPOINT_PREFIXES[v - 1].length).replace(/-/g, '%').replace(/_/g, '/').replace('%3A//', '://').replace(re, '').replace('%3F', '?').replace('%3D', '=').replace(reg, '@');
  try {
      clean = decodeURI(clean);
  } catch (e) {
      // Ignore if can't decodeURI
  }

  return clean;
type: javascript
tags:
- indicator-format
comment: |-
  Extract original URLs from Protected URLs from security tools like Proofpoint, Mimecast and Microsoft ATP.
  Changes https://urldefense.proofpoint.com/v2/url?u=https-3A__example.com_something.html -> https://example.com/something.html
  Changes https://sandbox-api.mimecast.com/s/izY4CzmwniM0H47o1B -> urltest.com
  Changes na01.safelinks.protection.outlook.com/?url=http%3a%2f%2fwww.avanan.com -> http://www.avanan.com
  Also, un-escape URLs that are escaped for safety with formats like hxxps://www[.]demisto[.]com
enabled: true
args:
- name: input
  required: true
  default: true
  description: The URL to process
scripttarget: 0
runonce: false
releaseNotes: "Adding ability to handle Mimecast and Microsoft ATP protected URLs"
tests:
  - UnEscapeURLs-Test
