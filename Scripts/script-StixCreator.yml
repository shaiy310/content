commonfields:
  id: StixCreator
  version: -1
name: StixCreator
script: |-
  ''' IMPORTS '''
  import json

  from stix2 import Indicator, Bundle, Vulnerability, ExternalReference

  indicators = []

  userArgs = demisto.args().get('indicators','Unknown')
  if isinstance(userArgs, dict) == True:
      all_args = json.loads(json.dumps(userArgs))
  else:
      try:
          all_args = json.loads(demisto.args().get('indicators','Unknown'))
      except:
          return_error('indicators argument is invalid json object')

  isIndicator = True
  counter = 0
  for indicator_fields in all_args:
      demisto_indicator_type = all_args[indicator_fields].get('indicator_type','Unknown')
      value = all_args[indicator_fields].get('value','')
      source_system = all_args[indicator_fields].get('source','')
      demisto_score = all_args[indicator_fields].get('score','')
      first_seen = all_args[indicator_fields].get('firstSeen','1970-01-01T00:00:00+00:00')
      demisto_created = all_args[indicator_fields].get('timestamp','1970-01-01T00:00:00+00:00')
      last_seen = all_args[indicator_fields].get('lastSeen','1970-01-01T00:00:00+00:00')
      stix_type_and_value = ""

      if "File MD5".lower() in demisto_indicator_type.lower():
          stix_type_and_value = "[file:hashes.md5 = '" + value + "']"
      elif "File SHA-1".lower() in demisto_indicator_type.lower():
          stix_type_and_value = "[file:hashes.sha1 = '" + value + "']"
      elif "File SHA1".lower() in demisto_indicator_type.lower():
          stix_type_and_value = "[file:hashes.sha1 = '" + value + "']"
      elif "File SHA256".lower() in demisto_indicator_type.lower():
          stix_type_and_value = "[file:hashes.sha256 = '" + value + "']"
      elif "File SHA-256".lower() in  demisto_indicator_type.lower():
          stix_type_and_value = "[file:hashes.sha256 = '" + value + "']"
      elif "IP".lower() in demisto_indicator_type.lower():
          stix_type_and_value = "[ipv4-addr:value = '" + value + "']"
      elif "URL".lower() in demisto_indicator_type.lower():
          stix_type_and_value = "[url:value = '" + value + "']"
      elif "Registry Path Reputation".lower() in demisto_indicator_type.lower():
          stix_type_and_value = "[win-registry-key:key ='" + value + "']"
      elif "CVE CVSS Score".lower() in demisto_indicator_type.lower():
          stix_type_and_value = value
          isIndicator = False
      else:
          stix_type_and_value = "[{}:value = '{}']".format(demisto_indicator_type.lower(),value)
      label_as_type = demisto_indicator_type.lower()
      if demisto_score.lower() == "bad":
          demisto_score = "High"
      elif demisto_score.lower() == "suspicious":
          demisto_score = "Medium"
      elif demisto_score.lower() == "good":
          demisto_score = "None"
      else:
          demisto_score = "Not Specified"
      if isIndicator:
          try:
              indicator = Indicator(labels=[label_as_type],
                              pattern=stix_type_and_value,
                              source=source_system,
                              created=demisto_created,
                              modified=last_seen,
                              firstSeen=first_seen,
                              score=demisto_score,
                              allow_custom=True)
          except:
              continue
          indicators.append(indicator)
      else:
          try:
              vulnerability = Vulnerability(name=stix_type_and_value,
                                        description=label_as_type,
                                        labels=[label_as_type],
                                        external_references=[ExternalReference(source_name="cve",external_id=stix_type_and_value)])
          except:
              continue
          indicators.append(vulnerability)
      counter+=1
  if counter > 1:
      bundle = Bundle(indicators)
      context = {
          'StixExportedIndicators(val.pattern && val.pattern == obj.pattern)': json.loads(str(bundle))
      }
      return_outputs(readable_output="",
                     outputs=context,
                     raw_response=str(bundle))
  elif counter == 1:
      context = {
          'StixExportedIndicators(val.pattern && val.pattern == obj.pattern)': json.loads(str(indicators[0]))
      }
      return_outputs(readable_output="",
                     outputs=context,
                     raw_response=str(indicators[0]))
  else:
      context = {
          'StixExportedIndicators': json.loads("{}")
      }
      return_outputs(readable_output="",
                     outputs=context,
                     raw_response="{}")
type: python
tags: []
comment: Get list of indicators in argument 'indicators' and create out of them a
  json file in STIX 2.0 format
enabled: true
args:
- name: indicators
  required: true
  description: json object of all indicators  fields index mapped to indicators fields
outputs:
- contextPath: StixExportedIndicators.created
  description: Indicator creation date
  type: date
- contextPath: StixExportedIndicators.firstSeen
  description: Indicator first use
  type: date
- contextPath: StixExportedIndicators.source
  description: Source system for this indicator
  type: string
- contextPath: StixExportedIndicators.type
  description: Type always exported as indicator
  type: string
- contextPath: StixExportedIndicators.pattern
  description: type and value of indicators (URL, IPv4, domain, email, etc)
  type: string
- contextPath: StixExportedIndicators.score
  description: STIX impact score can be High, Medium, None or Not Specified
  type: string
- contextPath: StixExportedIndicators.modified
  description: Indicator last appearance
  type: date
scripttarget: 0
runonce: false
dockerimage: demisto/stix2:1.0.0.204
runas: DBotWeakRole
tests:
- StixCreator-Test
