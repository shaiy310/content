commonfields:
  id: GenerateRandomString
  version: 23
name: GenerateRandomString
description: Generates a random string.
comment: "-"
script: |
  import json
  import string
  from random import *

  def create_entry(title,data, ec):
      return {
          'ContentsFormat': formats['json'],
          'Type': entryTypes['note'],
          'Contents': data,
          'ReadableContentsFormat': formats['markdown'],
          'HumanReadable': tableToMarkdown(title, data) if data else 'No result were found',
          'EntryContext': ec
      }

  def raise_error(error):
      return {
          'Type' : entryTypes['error'],
          'ContentsFormat' : formats['text'],
          'Contents' : str(error)
      }




  length = int(demisto.args()["Length"])
  punctuation = demisto.args()["Punctuation"]
  lowercase = demisto.args()["Lowercase"]
  uppercase = demisto.args()["Uppercase"]
  digits = demisto.args()["Digits"]

  characters = ""
  if length > 0:
      if uppercase == "True" or lowercase == "True" or digits == "True" or punctuation == "True":

          if lowercase == "True":
              characters += string.ascii_lowercase

          if uppercase == "True":
              characters += string.ascii_uppercase

          if digits == "True":
              characters += string.digits

          if punctuation == "True":
              characters += string.punctuation

      else:
          demisto.results(raise_error("Punctuation,Digits or Letters must be True."))
          sys.exit(1)
  else:
      demisto.results(raise_error("Length must be grather than 0."))
      sys.exit(1)

  password =  "".join(choice(characters) for x in range(0,length))


  raw = {"RandomString": password}
  raw = json.loads(json.dumps(raw))
  ec = {'RandomString': password }
  demisto.results(create_entry('RandomString Generated.',raw, ec))
type: python
tags: []
enabled: true
description: Generates a random string.
args:
- name: Length
  required: true
  description: Length of the string
- name: Punctuation
  required: true
  auto: PREDEFINED
  predefined:
  - "True"
  - "False"
  description: If the string will include punctuation.
- name: Lowercase
  required: true
  auto: PREDEFINED
  predefined:
  - "True"
  - "False"
  description: If the string will include letters.
- name: Uppercase
  description: if uppercase should be included
  required: true
  auto: PREDEFINED
  predefined:
  - "True"
  - "False"
- name: Digits
  required: true
  description: If digits should be included
  auto: PREDEFINED
  predefined:
  - "True"
  - "False"
outputs:
- contextPath: RandomString
  description: The generated string.
  type: string
scripttarget: 0
runonce: false
tests:
  - RandomStringGenerateTest
releaseNotes: "-"
